<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="trust200902" docName="draft-ietf-oauth-selective-disclosure-jwt-00" submissionType="IETF" category="std" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" consensus="true">

<front>
<title abbrev="SD-JWT">Selective Disclosure for JWTs (SD-JWT)</title><seriesInfo value="draft-ietf-oauth-selective-disclosure-jwt-00" stream="IETF" status="standard" name="Internet-Draft"></seriesInfo>
<author initials="D." surname="Fett" fullname="Daniel Fett"><organization>yes.com</organization><address><postal><street></street>
</postal><email>mail@danielfett.de</email>
<uri>https://danielfett.de/</uri>
</address></author>
<author initials="K." surname="Yasuda" fullname="Kristina Yasuda"><organization>Microsoft</organization><address><postal><street></street>
</postal><email>Kristina.Yasuda@microsoft.com</email>
</address></author>
<date/>
<area>Security</area>
<workgroup>Web Authorization Protocol</workgroup>
<keyword>security</keyword>
<keyword>oauth2</keyword>

<abstract>
<t>This document specifies conventions for creating JSON Web Token (JWT)
documents that support selective disclosure of JWT claim values.</t>
</abstract>

</front>

<middle>

<section anchor="Introduction"><name>Introduction</name>
<t>The JSON-based representation of claims in a signed JSON Web Token (JWT) <xref target="RFC7519"></xref> is
secured against modification using JSON Web Signature (JWS) <xref target="RFC7515"></xref> digital
signatures. A consumer of a signed JWT that has checked the
signature can safely assume that the contents of the token have not been
modified.  However, anyone receiving an unencrypted JWT can read all of the
claims and likewise, anyone with the decryption key receiving an encrypted JWT
can also read all of the claims.</t>
<t>This document describes a format for signed JWTs that supports selective
disclosure (SD-JWT), enabling sharing only a subset of the claims included in
the original signed JWT instead of releasing all the claims to every verifier.
During issuance, an SD-JWT is sent from the issuer to the holder alongside an
SD-JWT Salt/Value Container (SVC), a JSON object that contains the mapping
between raw claim values contained in the SD-JWT and the salts for each claim
value.</t>
<t>This document also defines a format for SD-JWT Releases (SD-JWT-R), which convey
a subset of the claim values of an SD-JWT to the verifier. For presentation, the
holder creates an SD-JWT-R and sends it together with the SD-JWT to the
verifier. To verify claim values received in SD-JWT-R, the verifier uses the
salts values in the SD-JWT-R to compute the hash digests of the claim values and
compare them to the ones in the SD-JWT.</t>
<t>One of the common use cases of a signed JWT is representing a user's identity
created by an issuer. As long as the signed JWT is one-time use, it typically
only contains those claims the user has consented to release to a specific
verifier. However, when a signed JWT is intended to be multi-use, it needs to
contain the superset of all claims the user might want to release to verifiers
at some point. The ability to selectively disclose a subset of these claims
depending on the verifier becomes crucial to ensure minimum disclosure and
prevent verifiers from obtaining claims irrelevant for the transaction at hand.</t>
<t>One example of such a multi-use JWT is a verifiable credential, a
tamper-evident credential with a cryptographically verifiable authorship that
contains claims about a subject. SD-JWTs defined in this document enable such
selective disclosure of claims.</t>
<t>While JWTs for claims describing natural persons are a common use case, the
mechanisms defined in this document can be used for many other use cases as
well.</t>
<t>This document also describes holder binding, or the concept of binding SD-JWT to
key material controlled by the subject of SD-JWT. Holder binding is optional to
implement.</t>

<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"></xref> <xref target="RFC8174"></xref> when, and only when, they
appear in all capitals, as shown here.</t>
<t><strong>base64url</strong> denotes the URL-safe base64 encoding without padding defined in
Section 2 of <xref target="RFC7515"></xref>.</t>
</section>
</section>

<section anchor="terms-and-definitions"><name>Terms and Definitions</name>

<dl>
<dt>Selectively Disclosable JWT (SD-JWT)</dt>
<dd><t>A JWT <xref target="RFC7515"></xref> created by the issuer, which is signed as a JWS <xref target="RFC7515"></xref>,
that supports selective disclosure as defined in this document.</t>
</dd>
<dt>SD-JWT Salt/Value Container (SVC)</dt>
<dd><t>A JSON object created by the issuer that contains mapping between
raw claim values contained in the SD-JWT and the salts for each claim value.</t>
</dd>
<dt>SD-JWT Release (SD-JWT-R)</dt>
<dd><t>A JWT created by the holder that contains a subset of the claim values of an SD-JWT in a verifiable way.</t>
</dd>
<dt>Holder binding</dt>
<dd><t>Ability of the holder to prove legitimate possession of SD-JWT by proving
control over the same private key during the issuance and presentation. SD-JWT signed by the issuer contains
a public key or a reference to a public key that matches to the private key controlled by the holder.</t>
</dd>
<dt>Claim name blinding</dt>
<dd><t>Feature that enables to blind not only claim values, but also claim names of the claims
that are included in SD-JWT but are not disclosed to the verifier in the SD-JWT-Release.</t>
</dd>
<dt>Issuer</dt>
<dd><t>An entity that creates SD-JWTs (2.1).</t>
</dd>
<dt>Holder</dt>
<dd><t>An entity that received SD-JWTs (2.1) from the issuer and has control over them.</t>
</dd>
<dt>Verifier</dt>
<dd><t>An entity that requests, checks and extracts the claims from SD-JWT-R (2.2)</t>
</dd>
</dl>
<t>Note: discuss if we want to include Client, Authorization Server for the purpose of
ensuring continuity and separating the entity from the actor.</t>
</section>

<section anchor="flow-diagram"><name>Flow Diagram</name>
<figure><name>SD-JWT Issuance and Presentation Flow
</name>
<sourcecode type="ascii-art">           +------------+
           |            |
           |   Issuer   |
           |            |
           +------------+
                 |
               Issues
           SD-JWT and SVC
                 |
                 v
           +------------+
           |            |
           |   Holder   |
           |            |
           +------------+
                 |
              Presents
         SD-JWT-R and SD-JWT
                 |
                 v
           +-------------+
           |             |+
           |  Verifiers  ||+
           |             |||
           +-------------+||
            +-------------+|
             +-------------+
</sourcecode>
</figure>
</section>

<section anchor="concepts"><name>Concepts</name>
<t>In the following, the contents of SD-JWTs and SD-JWT Releases are described at a
conceptual level, abstracting from the data formats described afterwards.</t>

<section anchor="creating-an-sd-jwt"><name>Creating an SD-JWT</name>
<t>An SD-JWT, at its core, is a digitally signed document containing hash digests over the claim values with unique random salts and other metadata.
It MUST be digitally signed using the issuer's private key.</t>

<artwork>SD-JWT-DOC = (METADATA, SD-CLAIMS)
SD-JWT = SD-JWT-DOC | SIG(SD-JWT-DOC, ISSUER-PRIV-KEY)
</artwork>
<t><tt>SD-CLAIMS</tt> can be a simple object with claim names mapped to hash digests over the claim values with unique random salts:</t>

<artwork>SD-CLAIMS = (
    CLAIM-NAME: HASH(SALT | CLAIM-VALUE)
)*
</artwork>
<t>The claim name (<tt>CLAIM-NAME</tt>) is an optional</t>
<t><tt>SD-CLAIMS</tt> can also be nested deeper to capture more complex objects, as will be shown later.</t>
<t><tt>SD-JWT</tt> is sent from the issuer to the holder, together with the mapping of the plain-text claim values, the salt values, and potentially some other information.</t>
</section>

<section anchor="creating-an-sd-jwt-release"><name>Creating an SD-JWT Release</name>
<t>To disclose to a verifier a subset of the SD-JWT claim values, a holder creates a JWT such as the
following:</t>

<artwork>SD-JWT-RELEASE-DOC = (METADATA, SD-RELEASES)
SD-JWT-RELEASE = SD-JWT-RELEASE-DOC
</artwork>
<t><tt>SD-RELEASES</tt> follows the structure of <tt>SD-CLAIMS</tt> and can be a simple object with claim names mapped to values and salts:</t>

<artwork>SD-RELEASES = (
    CLAIM-NAME: (DISCLOSED-SALT, DISCLOSED-VALUE)
)
</artwork>
<t>Just as <tt>SD-CLAIMS</tt>, <tt>SD-RELEASES</tt> can be more complex as well.</t>
<t><tt>SD-JWT-RELEASE</tt> is sent together with <tt>SD-JWT</tt> from the holder to the
verifier.</t>
</section>

<section anchor="optional-holder-binding"><name>Optional Holder Binding</name>
<t>Some use-cases may require holder binding.</t>
<t>If holder binding is desired, <tt>SD-JWT</tt> must contain information about key material controlled by the holder:</t>

<artwork>SD-JWT-DOC = (METADATA, HOLDER-PUBLIC-KEY, SD-CLAIMS)
</artwork>
<t>Note: How the public key is included in SD-JWT is out of scope of this document. It can be passed by value or by reference.</t>
<t>With holder binding, the <tt>SD-JWT-RELEASE</tt> is signed by the holder using its private key. It therefore looks as follows:</t>

<artwork>SD-JWT-RELEASE = SD-JWT-RELEASE-DOC | SIG(SD-JWT-RELEASE-DOC, HOLDER-PRIV-KEY)
</artwork>
</section>

<section anchor="optional-claim-name-blinding"><name>Optional Claim Name Blinding</name>
<t>If claim name blinding is used, <tt>SD-CLAIMS</tt> is created as follows:</t>

<artwork>SD-CLAIMS = (
    CLAIM-NAME-PLACEHOLDER: HASH(SALT | CLAIM-VALUE | CLAIM-NAME)
)*
</artwork>
<t><tt>CLAIM-NAME-PLACEHOLDER</tt> is a placeholder used instead of the original claim
name, chosen such that it does not leak information about the claim name (e.g.,
randomly).</t>
<t>The contents of <tt>SD-RELEASES</tt> are modified as follows:</t>

<artwork>SD-RELEASES = (
    CLAIM-NAME-PLACEHOLDER: (DISCLOSED-SALT, DISCLOSED-VALUE, DISCLOSED-CLAIM-NAME)
)
</artwork>
<t>Note that blinded and unblinded claim names can be mixed in <tt>SD-CLAIMS</tt> and accordingly in <tt>SD-RELEASES</tt>.</t>
</section>

<section anchor="verifying-an-sd-jwt-release"><name>Verifying an SD-JWT Release</name>
<t>A verifier checks that</t>

<ul>
<li><t>for each claim in <tt>SD-JWT-RELEASE</tt>, the hash digest over the disclosed values
matches the hash digest under the given claim name in <tt>SD-JWT</tt>,</t>
</li>
<li><t>if holder binding is used, the <tt>SD-JWT-RELEASE</tt> was signed by the private key
belonging to <tt>HOLDER-PUBLIC-KEY</tt>.</t>
</li>
</ul>
<t>The detailed algorithm is described below.</t>
</section>
</section>

<section anchor="data-formats"><name>Data Formats</name>
<t>This section defines data formats for SD-JWTs (containing hash digests of the salted
claim values), SD-JWT Salt/Value Containers (containing the mapping of the
plain-text claim values and the salt values), and SD-JWT Releases (containing a
subset of the same mapping).</t>

<section anchor="the-challenge-of-canonicalization"><name>The Challenge of Canonicalization</name>
<t>When receiving an SD-JWT with an associated Release, a verifier must be able to
re-compute digests of the disclosed claim value and, given the same input values,
obtain the same digest values as signed by the issuer.</t>
<t>Usually, JSON-based formats transport claim values as simple properties of a JSON object such as this:</t>

<artwork>...
  &quot;family_name&quot;: &quot;Möbius&quot;,
  &quot;address&quot;: {
    &quot;street_address&quot;: &quot;Schulstr. 12&quot;,
    &quot;locality&quot;: &quot;Schulpforta&quot;
  }
...
</artwork>
<t>However, a problem arises when signatures over the data need to be computed and
verified. Common signature schemes require the same byte string as input to the
signature verification as was used for creating the signature. In the salted
hash approach outlined above, the same problem exists: For the issuer and the
verifier to arrive at the same hash digest, the same byte string must be hashed.</t>
<t>JSON, however, does not prescribe a unique encoding for data, but allows for variations in the encoded string. The data above, for example, can be encoded as</t>

<artwork>...
&quot;family_name&quot;: &quot;M\u00f6bius&quot;, 
&quot;address&quot;: {&quot;street_address&quot;: &quot;Schulstr. 12&quot;, &quot;locality&quot;: &quot;Schulpforta&quot;}
...
</artwork>
<t>or as</t>

<artwork>...
&quot;family_name&quot;: &quot;Möbius&quot;,
&quot;address&quot;: {&quot;locality&quot;:&quot;Schulpforta&quot;, &quot;street_address&quot;:&quot;Schulstr. 12&quot;}
...
</artwork>
<t>The two representations <tt>&quot;M\u00f6bius&quot;</tt> and <tt>&quot;Möbius&quot;</tt> are very different on the byte-level, but yield
equivalent objects. Same for the representations <tt>{&quot;street_address&quot;: &quot;Schulstr. 12&quot;, &quot;locality&quot;: &quot;Schulpforta&quot;}</tt> and <tt>{&quot;locality&quot;:&quot;Schulpforta&quot;, &quot;street_address&quot;:&quot;Schulstr. 12&quot;}</tt>.</t>
<t>The variations in white space, ordering of object properties, and encoding of
Unicode characters are all allowed by the JSON specification. Other variations,
e.g., concerning floating-point numbers, are described in <xref target="RFC8785"></xref>. Variations
can be introduced whenever JSON data is serialized or deserialized and unless
dealt with, will lead to different hashes and the inability to verify
signatures.</t>
<t>There are generally two approaches to deal with this problem:</t>

<ol>
<li><t>Canonicalization: The data is transferred in JSON format, potentially
introducing variations in its representation, but is transformed into a
canonical form before hashing. Both the issuer and the verifier
must use the same canonicalization algorithm to arrive at the same byte
string for hashing.</t>
</li>
<li><t>Source-string encoding: Instead of transferring data in JSON format that may
introduce variations, the serialized data that is used as the hash input is
transferred from the issuer to the verifier. This means that the verifier can
easily check the hash over the byte string before deserializing the data.</t>
</li>
</ol>
<t>Mixed approaches are conceivable, i.e., transferring both the original JSON data
plus a string suitable for hashing, but such approaches can easily lead to
undetected inconsistencies resulting in time-of-check-time-of-use type security
vulnerabilities.</t>
<t>In this specification, the source-string encoding approach is used, as it allows
for simple and reliable interoperability without the requirement for a
canonicalization library. To encode the source string, JSON itself is used. To
produce a source-string for hashing, the data is put into a JSON object together
with the salt value, like so (non-normative example, see <xref target="sd_digests_claim"></xref> for
details):</t>

<artwork>{&quot;s&quot;: &quot;6qMQvRL5haj&quot;, &quot;v&quot;: &quot;Möbius&quot;}
</artwork>
<t>Or, for the address example above:</t>

<artwork>{&quot;s&quot;: &quot;al1N3Zom221&quot;, &quot;v&quot;: {&quot;locality&quot;:&quot;Schulpforta&quot;, &quot;street_address&quot;:&quot;Schulstr. 12&quot;}}
</artwork>
<t>This object is then JSON-encoded and used as the source string. The JSON-encoded value is transferred in the SD-JWT-Release instead of the original JSON data:</t>

<artwork>&quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6qMQvRL5haj\&quot;, \&quot;v\&quot;: \&quot;M\\u00f6bius\&quot;}&quot;
</artwork>
<t>Or, for the address example:</t>

<artwork>&quot;address&quot;: &quot;{\&quot;s\&quot;: \&quot;al1N3Zom221\&quot;, \&quot;v\&quot;: {\&quot;locality\&quot;: \&quot;Schulpforta\&quot;, \&quot;street_address\&quot;: \&quot;Schulstr. 12\&quot;}}&quot;
</artwork>
<t>A verifier can then easily check the hash over the source string before
extracting the original JSON data. Variations in the encoding of the source
string are implicitly tolerated by the verifier, as the hash is computed over a
predefined byte string and not over a JSON object.</t>
<t>Since the encoding is based on JSON, all value types that are allowed in JSON
are also allowed in the <tt>v</tt> property in the source string. This includes
numbers, strings, booleans, arrays, and objects.</t>
<t>It is important to note that the SD-JWT-Release containing the source string is
neither intended nor suitable for direct consumption by an application that
needs to access the disclosed claim values. The SD-JWT-Release is only intended
to be used by a verifier to check the hash over the source string and to extract
the original JSON data. The original JSON data is then used by the application.
See <xref target="processing_model"></xref> for details.</t>
<t>Using this approach, SD-JWTs can be implemented purely based on widely available
JSON encoding and decoding libraries.</t>
</section>

<section anchor="format-of-an-sd-jwt"><name>Format of an SD-JWT</name>
<t>An SD-JWT is a JWT that MUST be signed using the issuer's private key. The
payload of an SD-JWT MUST contain the <tt>sd_digests</tt> and <tt>sd_hash_alg</tt> claims
described in the following, and MAY contain a holder's public key or a reference
thereto, as well as further claims such as <tt>iss</tt>, <tt>iat</tt>, etc. as defined or
required by the application using SD-JWTs.</t>

<section anchor="sd_digests_claim"><name><tt>sd_digests</tt> Claim (Digests of Selectively Disclosable Claims)</name>
<t>An SD-JWT MUST include hash digests of the salted claim values that are included by the issuer
under the property <tt>sd_digests</tt>.</t>
<t>The issuer MUST choose a unique and cryptographically random salt value
for each claim value. Each salt value
SHOULD contain at least 128 bits of pseudorandom data, making it hard for an
attacker to guess. The salt value MUST then be encoded as a string. It is
RECOMMENDED to base64url-encode the salt value.</t>
<t>The issuer MUST build the digests by hashing over a JSON literal according to
<xref target="RFC8259"></xref> that is formed by
JSON-encoding an object with the following contents:</t>

<ul>
<li><t>REQUIRED with the key <tt>s</tt>: the salt value,</t>
</li>
<li><t>REQUIRED with the key <tt>v</tt>: the claim value (either a string or a more complex object, e.g., for the x@OIDCx <tt>address</tt> claim),</t>
</li>
<li><t>OPTIONAL, with the key <tt>n</tt>: the claim name (if claim name blinding is to be used for this claim).</t>
</li>
</ul>
<t>The following is an example for a JSON literal without claim name blinding:</t>

<artwork>{&quot;s&quot;: &quot;6qMQvRL5haj&quot;, &quot;v&quot;: &quot;Peter&quot;}
</artwork>
<t>The following is an example for a JSON literal with claim name blinding:</t>

<artwork>{&quot;s&quot;: &quot;6qMQvRL5haj&quot;, &quot;v&quot;: &quot;Peter&quot;, &quot;n&quot;: &quot;given_name&quot;}
</artwork>
<t>The <tt>sd_digests</tt> claim contains an object where claim names are mapped to the
respective digests. If a claim name is to be blinded, the digests MUST contain
the <tt>n</tt> key as described above and the claim name in <tt>sd_digests</tt> MUST be
replaced by a placeholder value that does not leak information about the claim's original name. The same placeholder value is to be used in the SVC and SD-JWT-R described below.</t>

<section anchor="flat-and-structured-sd-digests-objects"><name>Flat and Structured <tt>sd_digests</tt> objects</name>
<t>The <tt>sd_digests</tt> object can be a 'flat' object, directly containing all claim
names and hashed claim values without any deeper structure. The <tt>sd_digests</tt>
object can also be a 'structured' object, where some claims and their respective
hash digests are contained in places deeper in the structure. It is at the issuer's
discretion whether to use a 'flat' or 'structured' <tt>sd_digests</tt> SD-JWT object,
and how to structure it such that it is suitable for the use case.</t>
<t>Example 1 below is a non-normative example of an SD-JWT using a 'flat'
<tt>sd_digests</tt> object and Example 2 in the appendix shows a non-normative example
of an SD-JWT using a 'structured' <tt>sd_digests</tt> object. The difference between
the examples is how the <tt>address</tt> claim is disclosed.</t>
<t>Appendix 2 shows a more complex example using claims from eKYC (todo:
reference).</t>
</section>
</section>

<section anchor="hash-function-claim"><name>Hash Function Claim</name>
<t>The claim <tt>sd_hash_alg</tt> indicates the hash algorithm used by the Issuer to generate
the hashes of the salted claim values. The hash algorithm identifier MUST be a
value from the &quot;Hash Name String&quot; column in the IANA &quot;Named Information Hash
Algorithm&quot; registry [IANA.Hash.Algorithms]. SD-JWTs with hash algorithm
identifiers not found in this registry are not considered valid and MUST NOT be
accepted by verifiers.</t>
<t>To promote interoperability, implementations MUST support the SHA-256 hash algorithm.</t>
</section>

<section anchor="holder-public-key-claim"><name>Holder Public Key Claim</name>
<t>If the issuer wants to enable holder binding, it MAY include a public key
associated with the holder, or a reference thereto.</t>
<t>It is out of the scope of this document to describe how the holder key pair is
established. For example, the holder MAY provide a key pair to the issuer,
the issuer MAY create the key pair for the holder, or
holder and issuer MAY use pre-established key material.</t>
<t>Note: Examples in this document use <tt>cnf</tt> Claim defined in <xref target="RFC7800"></xref> to include raw public key by value in SD-JWT.</t>
</section>
</section>

<section anchor="example-1-sd-jwt"><name>Example 1: SD-JWT</name>
<t>This example and Example 2 in the appendix use the following object as the set
of claims that the Issuer is issuing:</t>

<sourcecode anchor="example-simple-user_claims" type="json">{
  &quot;sub&quot;: &quot;6c5c0a49-b589-431d-bae7-219122a9ec2c&quot;,
  &quot;given_name&quot;: &quot;John&quot;,
  &quot;family_name&quot;: &quot;Doe&quot;,
  &quot;email&quot;: &quot;johndoe@example.com&quot;,
  &quot;phone_number&quot;: &quot;+1-202-555-0101&quot;,
  &quot;address&quot;: {
    &quot;street_address&quot;: &quot;123 Main St&quot;,
    &quot;locality&quot;: &quot;Anytown&quot;,
    &quot;region&quot;: &quot;Anystate&quot;,
    &quot;country&quot;: &quot;US&quot;
  },
  &quot;birthdate&quot;: &quot;1940-01-01&quot;
}
</sourcecode>
<t>The following non-normative example shows the payload of an SD-JWT. The issuer
is using a flat structure, i.e., all of the claims the <tt>address</tt> claim can only
be disclosed in full.</t>

<sourcecode anchor="example-simple-sd_jwt_payload" type="json">{
  &quot;iss&quot;: &quot;https://example.com/issuer&quot;,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;: &quot;RSA&quot;,
      &quot;n&quot;: &quot;pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw&quot;,
      &quot;e&quot;: &quot;AQAB&quot;
    }
  },
  &quot;iat&quot;: 1516239022,
  &quot;exp&quot;: 1516247022,
  &quot;sd_hash_alg&quot;: &quot;sha-256&quot;,
  &quot;sd_digests&quot;: {
    &quot;sub&quot;: &quot;OMdwkk2HPuiInPypWUWMxot1Y2tStGsLuIcDMjKdXMU&quot;,
    &quot;given_name&quot;: &quot;AfKKH4a0IZki8MFDythFaFS_Xqzn-wRvAMfiy_VjYpE&quot;,
    &quot;family_name&quot;: &quot;eUmXmry32JiK_76xMasagkAQQsmSVdW57Ajk18riSF0&quot;,
    &quot;email&quot;: &quot;-Rcr4fDyjwlM_itcMxoQZCE1QAEwyLJcibEpH114KiE&quot;,
    &quot;phone_number&quot;: &quot;Jv2nw0C1wP5ASutYNAxrWEnaDRIpiF0eTUAkUOp8F6Y&quot;,
    &quot;address&quot;: &quot;ZrjKs-RmEAVeAYSzSw6GPFrMpcgctCfaJ6t9qQhbfJ4&quot;,
    &quot;birthdate&quot;: &quot;qXPRRPdpNaebP8jtbEpO-skF4n7v7ASTh8oLg0mkAdQ&quot;
  }
}
</sourcecode>
<t>The SD-JWT is then signed by the issuer to create a document like the following:</t>

<artwork anchor="example-simple-serialized_sd_jwt">eyJhbGciOiAiUlMyNTYiLCAia2lkIjogImNBRUlVcUowY21MekQxa3pHemhlaUJhZzBZUk
F6VmRsZnhOMjgwTmdIYUEifQ.eyJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1Z
XIiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJSU0EiLCAibiI6ICJwbTRiT0hCZy1vWWh
BeVBXelI1NkFXWDNyVUlYcDExX0lDRGtHZ1M2VzNaV0x0cy1oendJM3g2NTY1OWtnNGhWb
zlkYkdvQ0pFM1pHRl9lYWV0RTMwVWhCVUVncEd3ckRyUWlKOXpxcHJtY0ZmcjNxdnZrR2p
0dGg4WmdsMWVNMmJKY093RTdQQ0JIV1RLV1lzMTUyUjdnNkpnMk9WcGgtYThycS1xNzlNa
EtHNVFvV19tVHoxMFFUXzZINGM3UGpXRzFmamg4aHBXTm5iUF9wdjZkMXpTd1pmYzVmbDZ
5VlJMMERWMFYzbEdIS2UyV3FmX2VOR2pCckJMVmtsRFRrOC1zdFhfTVdMY1ItRUdtWEFPd
jBVQldpdFNfZFhKS0p1LXZYSnl3MTRuSFNHdXhUSUsyaHgxcHR0TWZ0OUNzdnFpbVhLZUR
UVTE0cVFMMWVFN2loY3ciLCAiZSI6ICJBUUFCIn19LCAiaWF0IjogMTUxNjIzOTAyMiwgI
mV4cCI6IDE1MTYyNDcwMjIsICJzZF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwgInNkX2RpZ2V
zdHMiOiB7InN1YiI6ICJPTWR3a2sySFB1aUluUHlwV1VXTXhvdDFZMnRTdEdzTHVJY0RNa
ktkWE1VIiwgImdpdmVuX25hbWUiOiAiQWZLS0g0YTBJWmtpOE1GRHl0aEZhRlNfWHF6bi1
3UnZBTWZpeV9WallwRSIsICJmYW1pbHlfbmFtZSI6ICJlVW1YbXJ5MzJKaUtfNzZ4TWFzY
WdrQVFRc21TVmRXNTdBamsxOHJpU0YwIiwgImVtYWlsIjogIi1SY3I0ZkR5andsTV9pdGN
NeG9RWkNFMVFBRXd5TEpjaWJFcEgxMTRLaUUiLCAicGhvbmVfbnVtYmVyIjogIkp2Mm53M
EMxd1A1QVN1dFlOQXhyV0VuYURSSXBpRjBlVFVBa1VPcDhGNlkiLCAiYWRkcmVzcyI6ICJ
acmpLcy1SbUVBVmVBWVN6U3c2R1BGck1wY2djdENmYUo2dDlxUWhiZko0IiwgImJpcnRoZ
GF0ZSI6ICJxWFBSUlBkcE5hZWJQOGp0YkVwTy1za0Y0bjd2N0FTVGg4b0xnMG1rQWRRIn1
9.QgoJn9wkjFvM9bAr0hTDHLspuqdA21WzfBRVHkASa2ck4PFD3TC9MiZSi3AiRytRbYT4
ZzvkH3BSbm6vy68y62gj0A6OYvZ1Z60Wxho14bxZQveJZgw3u_lMvYj6GKiUtskypFEHU-
Kd-LoDVqEpf6lPQHdpsac__yQ_JL24oCEBlVQRXB-T-6ZNZfID6JafSkNNCYQbI8nXbzIE
p1LBFm0fE8eUd4G4yPYOj1SeuR6Gy92T0vAoL5QtpIAHo49oAmiSIj6DQNl2cNYs74jhrB
IcNZyt4l8H1lV20wS5OS3T0vXaYD13fgm0p4iWD9cVg3HKShUVulEyrSbq94jIKg
</artwork>
<t>(Line breaks for presentation only.)</t>
</section>

<section anchor="format-of-a-sd-jwt-salt-value-container-svc"><name>Format of a SD-JWT Salt/Value Container (SVC)</name>
<t>Besides the SD-JWT itself, the holder needs to learn the raw claim values that
are contained in the SD-JWT, along with the precise input to the hash
calculation, and the salts. There MAY be other information the issuer needs to
communicate to the holder, such as a private key if the issuer selected the
holder key pair.</t>
<t>A SD-JWT Salt/Value Container (SVC) is a JSON object containing at least the
top-level property <tt>sd_release</tt>. Its structure mirrors the one of <tt>sd_digests</tt> in
the SD-JWT, but the values are the inputs to the hash calculations the issuer
used, as strings.</t>
<t>The SVC MAY contain further properties, for example, to transport the holder
private key.</t>
</section>

<section anchor="example-svc-for-the-flat-sd-jwt-in-example-1"><name>Example: SVC for the Flat SD-JWT in Example 1</name>
<t>The SVC for Example 1 is as follows:</t>

<sourcecode anchor="example-simple-svc_payload" type="json">{
  &quot;sd_release&quot;: {
    &quot;sub&quot;: &quot;{\&quot;s\&quot;: \&quot;2GLC42sKQveCfGfryNRN9w\&quot;, \&quot;v\&quot;: \&quot;6c5c0a49-b589-431d-bae7-219122a9ec2c\&quot;}&quot;,
    &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;}&quot;,
    &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;}&quot;,
    &quot;email&quot;: &quot;{\&quot;s\&quot;: \&quot;Pc33JM2LchcU_lHggv_ufQ\&quot;, \&quot;v\&quot;: \&quot;johndoe@example.com\&quot;}&quot;,
    &quot;phone_number&quot;: &quot;{\&quot;s\&quot;: \&quot;lklxF5jMYlGTPUovMNIvCA\&quot;, \&quot;v\&quot;: \&quot;+1-202-555-0101\&quot;}&quot;,
    &quot;address&quot;: &quot;{\&quot;s\&quot;: \&quot;5bPs1IquZNa0hkaFzzzZNw\&quot;, \&quot;v\&quot;: {\&quot;street_address\&quot;: \&quot;123 Main St\&quot;, \&quot;locality\&quot;: \&quot;Anytown\&quot;, \&quot;region\&quot;: \&quot;Anystate\&quot;, \&quot;country\&quot;: \&quot;US\&quot;}}&quot;,
    &quot;birthdate&quot;: &quot;{\&quot;s\&quot;: \&quot;y1sVU5wdfJahVdgwPgS7RQ\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;}&quot;
  }
}
</sourcecode>
<t>Important: As described above, hash digests are calculated over the JSON literal
formed by serializing an object containing the salt, the claim value, and
optionally the claim name. This ensures that issuer and verifier use the same
input to their hash functions and avoids issues with canonicalization of JSON
values that would lead to different hash digests. The SVC therefore maps claim
names to JSON-encoded arrays.</t>
</section>

<section anchor="sending-sd-jwt-and-svc-during-issuance"><name>Sending SD-JWT and SVC during Issuance</name>
<t>For transporting the SVC together with the SD-JWT from the issuer to the holder,
the SVC is base64url-encoded and appended to the SD-JWT using a period character <tt>.</tt> as the
separator.</t>
<t>The SVC and SD-JWT are implicitly linked through the hash values of the claims
in the SVC that is included in the SD-JWT. To ensure that the correct SVC and
SD-JWT pairings are being used, the holder SHOULD verify the binding between
SVC and SD-JWT as defined in the Verification Section of this document.</t>
<t>For Example 1, the combined format looks as follows:</t>

<artwork anchor="example-simple-combined_sd_jwt_svc">eyJhbGciOiAiUlMyNTYiLCAia2lkIjogImNBRUlVcUowY21MekQxa3pHemhlaUJhZzBZUk
F6VmRsZnhOMjgwTmdIYUEifQ.eyJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1Z
XIiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJSU0EiLCAibiI6ICJwbTRiT0hCZy1vWWh
BeVBXelI1NkFXWDNyVUlYcDExX0lDRGtHZ1M2VzNaV0x0cy1oendJM3g2NTY1OWtnNGhWb
zlkYkdvQ0pFM1pHRl9lYWV0RTMwVWhCVUVncEd3ckRyUWlKOXpxcHJtY0ZmcjNxdnZrR2p
0dGg4WmdsMWVNMmJKY093RTdQQ0JIV1RLV1lzMTUyUjdnNkpnMk9WcGgtYThycS1xNzlNa
EtHNVFvV19tVHoxMFFUXzZINGM3UGpXRzFmamg4aHBXTm5iUF9wdjZkMXpTd1pmYzVmbDZ
5VlJMMERWMFYzbEdIS2UyV3FmX2VOR2pCckJMVmtsRFRrOC1zdFhfTVdMY1ItRUdtWEFPd
jBVQldpdFNfZFhKS0p1LXZYSnl3MTRuSFNHdXhUSUsyaHgxcHR0TWZ0OUNzdnFpbVhLZUR
UVTE0cVFMMWVFN2loY3ciLCAiZSI6ICJBUUFCIn19LCAiaWF0IjogMTUxNjIzOTAyMiwgI
mV4cCI6IDE1MTYyNDcwMjIsICJzZF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwgInNkX2RpZ2V
zdHMiOiB7InN1YiI6ICJPTWR3a2sySFB1aUluUHlwV1VXTXhvdDFZMnRTdEdzTHVJY0RNa
ktkWE1VIiwgImdpdmVuX25hbWUiOiAiQWZLS0g0YTBJWmtpOE1GRHl0aEZhRlNfWHF6bi1
3UnZBTWZpeV9WallwRSIsICJmYW1pbHlfbmFtZSI6ICJlVW1YbXJ5MzJKaUtfNzZ4TWFzY
WdrQVFRc21TVmRXNTdBamsxOHJpU0YwIiwgImVtYWlsIjogIi1SY3I0ZkR5andsTV9pdGN
NeG9RWkNFMVFBRXd5TEpjaWJFcEgxMTRLaUUiLCAicGhvbmVfbnVtYmVyIjogIkp2Mm53M
EMxd1A1QVN1dFlOQXhyV0VuYURSSXBpRjBlVFVBa1VPcDhGNlkiLCAiYWRkcmVzcyI6ICJ
acmpLcy1SbUVBVmVBWVN6U3c2R1BGck1wY2djdENmYUo2dDlxUWhiZko0IiwgImJpcnRoZ
GF0ZSI6ICJxWFBSUlBkcE5hZWJQOGp0YkVwTy1za0Y0bjd2N0FTVGg4b0xnMG1rQWRRIn1
9.QgoJn9wkjFvM9bAr0hTDHLspuqdA21WzfBRVHkASa2ck4PFD3TC9MiZSi3AiRytRbYT4
ZzvkH3BSbm6vy68y62gj0A6OYvZ1Z60Wxho14bxZQveJZgw3u_lMvYj6GKiUtskypFEHU-
Kd-LoDVqEpf6lPQHdpsac__yQ_JL24oCEBlVQRXB-T-6ZNZfID6JafSkNNCYQbI8nXbzIE
p1LBFm0fE8eUd4G4yPYOj1SeuR6Gy92T0vAoL5QtpIAHo49oAmiSIj6DQNl2cNYs74jhrB
IcNZyt4l8H1lV20wS5OS3T0vXaYD13fgm0p4iWD9cVg3HKShUVulEyrSbq94jIKg.eyJzZ
F9yZWxlYXNlIjogeyJzdWIiOiAie1wic1wiOiBcIjJHTEM0MnNLUXZlQ2ZHZnJ5TlJOOXd
cIiwgXCJ2XCI6IFwiNmM1YzBhNDktYjU4OS00MzFkLWJhZTctMjE5MTIyYTllYzJjXCJ9I
iwgImdpdmVuX25hbWUiOiAie1wic1wiOiBcIjZJajd0TS1hNWlWUEdib1M1dG12VkFcIiw
gXCJ2XCI6IFwiSm9oblwifSIsICJmYW1pbHlfbmFtZSI6ICJ7XCJzXCI6IFwiUWdfTzY0e
nFBeGU0MTJhMTA4aXJvQVwiLCBcInZcIjogXCJEb2VcIn0iLCAiZW1haWwiOiAie1wic1w
iOiBcIlBjMzNKTTJMY2hjVV9sSGdndl91ZlFcIiwgXCJ2XCI6IFwiam9obmRvZUBleGFtc
GxlLmNvbVwifSIsICJwaG9uZV9udW1iZXIiOiAie1wic1wiOiBcImxrbHhGNWpNWWxHVFB
Vb3ZNTkl2Q0FcIiwgXCJ2XCI6IFwiKzEtMjAyLTU1NS0wMTAxXCJ9IiwgImFkZHJlc3MiO
iAie1wic1wiOiBcIjViUHMxSXF1Wk5hMGhrYUZ6enpaTndcIiwgXCJ2XCI6IHtcInN0cmV
ldF9hZGRyZXNzXCI6IFwiMTIzIE1haW4gU3RcIiwgXCJsb2NhbGl0eVwiOiBcIkFueXRvd
25cIiwgXCJyZWdpb25cIjogXCJBbnlzdGF0ZVwiLCBcImNvdW50cnlcIjogXCJVU1wifX0
iLCAiYmlydGhkYXRlIjogIntcInNcIjogXCJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRXCIsI
FwidlwiOiBcIjE5NDAtMDEtMDFcIn0ifX0
</artwork>
<t>(Line breaks for presentation only.)</t>
</section>

<section anchor="format-of-an-sd-jwt-release"><name>Format of an SD-JWT Release</name>
<t>SD-JWT-R contains claim values and the salts of the claims that the holder
has consented to release to the Verifier. This enables the Verifier to verify
the claims received from the holder by computing the hash digests of the claim
values and the salts revealed in the SD-JWT-R using the hashing algorithm
specified in SD-JWT and comparing them to the hash digests included in SD-JWT.</t>
<t>For each claim, an array of the salt and the claim value is contained in the
<tt>sd_release</tt> object. The structure of an <tt>sd_release</tt> object in the SD-JWT-R is the same as the structure of an <tt>sd_release</tt> object in SVC.</t>
<t>The SD-JWT-R MAY contain further claims, for example, to ensure a binding
to a concrete transaction (in the example the <tt>nonce</tt> and <tt>aud</tt> claims).</t>
<t>When the holder sends the SD-JWT-R to the Verifier, the SD-JWT-R MUST be a JWS
represented as the JWS Compact Serialization as described in
Section 7.1 of <xref target="RFC7515"></xref>.</t>
<t>If holder binding is desired, the SD-JWT-R is signed by the holder. If no
holder binding is to be used, the <tt>none</tt> algorithm is used, i.e., the document
is not signed. TODO: Change to plain base64 to avoid alg=none issues</t>
</section>

<section anchor="example-sd-jwt-release-for-example-1"><name>Example: SD-JWT Release for Example 1</name>
<t>The following is a non-normative example of the contents of an SD-JWT-R for Example 1:</t>

<sourcecode anchor="example-simple-sd_jwt_release_payload" type="json">{
  &quot;nonce&quot;: &quot;XZOUco1u_gEPknxS78sWWg&quot;,
  &quot;aud&quot;: &quot;https://example.com/verifier&quot;,
  &quot;sd_release&quot;: {
    &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;}&quot;,
    &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;}&quot;,
    &quot;address&quot;: &quot;{\&quot;s\&quot;: \&quot;5bPs1IquZNa0hkaFzzzZNw\&quot;, \&quot;v\&quot;: {\&quot;street_address\&quot;: \&quot;123 Main St\&quot;, \&quot;locality\&quot;: \&quot;Anytown\&quot;, \&quot;region\&quot;: \&quot;Anystate\&quot;, \&quot;country\&quot;: \&quot;US\&quot;}}&quot;
  }
}
</sourcecode>
<t>For each claim, a JSON literal that decodes to an object with the and the claim
value (plus optionally the claim name) is contained in the <tt>sd_release</tt> object.</t>
<t>Again, the SD-JWT-R follows the same structure as the <tt>sd_digests</tt> in the SD-JWT.</t>
<t>Below is a non-normative example of a representation of the SD-JWT-R JWS Compact
Serialization:</t>

<artwork anchor="example-simple-serialized_sd_jwt_release">eyJhbGciOiAiUlMyNTYiLCAia2lkIjogIkxkeVRYd0F5ZnJpcjRfVjZORzFSYzEwVThKZE
xZVHJFQktKaF9oNWlfclUifQ.eyJub25jZSI6ICJYWk9VY28xdV9nRVBrbnhTNzhzV1dnI
iwgImF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgInNkX3JlbGVhc2U
iOiB7ImdpdmVuX25hbWUiOiAie1wic1wiOiBcIjZJajd0TS1hNWlWUEdib1M1dG12VkFcI
iwgXCJ2XCI6IFwiSm9oblwifSIsICJmYW1pbHlfbmFtZSI6ICJ7XCJzXCI6IFwiUWdfTzY
0enFBeGU0MTJhMTA4aXJvQVwiLCBcInZcIjogXCJEb2VcIn0iLCAiYWRkcmVzcyI6ICJ7X
CJzXCI6IFwiNWJQczFJcXVaTmEwaGthRnp6elpOd1wiLCBcInZcIjoge1wic3RyZWV0X2F
kZHJlc3NcIjogXCIxMjMgTWFpbiBTdFwiLCBcImxvY2FsaXR5XCI6IFwiQW55dG93blwiL
CBcInJlZ2lvblwiOiBcIkFueXN0YXRlXCIsIFwiY291bnRyeVwiOiBcIlVTXCJ9fSJ9fQ.
fw4xRl7m1mDPCZvCTn3GOr2PgBZ--fTKfy7s-GuEifNvzW5KsJaBBFvzdZztm25XGhk29u
w-XwEw00r0hyxXLBvWfA0XbDK3JBmdpOSW1bEyNBdSHPJoeq9Xyts2JN40vJzU2UxNaLKD
aEheWf3F_E52yhHxvMLNdvZJ9FksJdSMK6ZCyGfRJadPN2GhNltqph52sWiFKUyUk_4Rtw
XmT_lF49tWOMZqtG-akN9wrBoMsleM0soA0BXIK10rG5cKZoSNr-u2luzbdZx3CFdAenaq
ScIkluPPcrXBZGYyX2zYUbGQs2RRXnBmox_yl6CvLbb0qTTYhDnDEo_MH-ZtWw
</artwork>
<t>(Line breaks for presentation only.)</t>
</section>

<section anchor="sending-sd-jwt-and-sd-jwt-r-during-presentation"><name>Sending SD-JWT and SD-JWT-R during Presentation</name>
<t>The SD-JWT and the SD-JWT-R can be combined into one document using period character <tt>.</tt> as a separator (here for Example 1):</t>

<artwork anchor="example-simple-combined_sd_jwt_sd_jwt_release">eyJhbGciOiAiUlMyNTYiLCAia2lkIjogImNBRUlVcUowY21MekQxa3pHemhlaUJhZzBZUk
F6VmRsZnhOMjgwTmdIYUEifQ.eyJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1Z
XIiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJSU0EiLCAibiI6ICJwbTRiT0hCZy1vWWh
BeVBXelI1NkFXWDNyVUlYcDExX0lDRGtHZ1M2VzNaV0x0cy1oendJM3g2NTY1OWtnNGhWb
zlkYkdvQ0pFM1pHRl9lYWV0RTMwVWhCVUVncEd3ckRyUWlKOXpxcHJtY0ZmcjNxdnZrR2p
0dGg4WmdsMWVNMmJKY093RTdQQ0JIV1RLV1lzMTUyUjdnNkpnMk9WcGgtYThycS1xNzlNa
EtHNVFvV19tVHoxMFFUXzZINGM3UGpXRzFmamg4aHBXTm5iUF9wdjZkMXpTd1pmYzVmbDZ
5VlJMMERWMFYzbEdIS2UyV3FmX2VOR2pCckJMVmtsRFRrOC1zdFhfTVdMY1ItRUdtWEFPd
jBVQldpdFNfZFhKS0p1LXZYSnl3MTRuSFNHdXhUSUsyaHgxcHR0TWZ0OUNzdnFpbVhLZUR
UVTE0cVFMMWVFN2loY3ciLCAiZSI6ICJBUUFCIn19LCAiaWF0IjogMTUxNjIzOTAyMiwgI
mV4cCI6IDE1MTYyNDcwMjIsICJzZF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwgInNkX2RpZ2V
zdHMiOiB7InN1YiI6ICJPTWR3a2sySFB1aUluUHlwV1VXTXhvdDFZMnRTdEdzTHVJY0RNa
ktkWE1VIiwgImdpdmVuX25hbWUiOiAiQWZLS0g0YTBJWmtpOE1GRHl0aEZhRlNfWHF6bi1
3UnZBTWZpeV9WallwRSIsICJmYW1pbHlfbmFtZSI6ICJlVW1YbXJ5MzJKaUtfNzZ4TWFzY
WdrQVFRc21TVmRXNTdBamsxOHJpU0YwIiwgImVtYWlsIjogIi1SY3I0ZkR5andsTV9pdGN
NeG9RWkNFMVFBRXd5TEpjaWJFcEgxMTRLaUUiLCAicGhvbmVfbnVtYmVyIjogIkp2Mm53M
EMxd1A1QVN1dFlOQXhyV0VuYURSSXBpRjBlVFVBa1VPcDhGNlkiLCAiYWRkcmVzcyI6ICJ
acmpLcy1SbUVBVmVBWVN6U3c2R1BGck1wY2djdENmYUo2dDlxUWhiZko0IiwgImJpcnRoZ
GF0ZSI6ICJxWFBSUlBkcE5hZWJQOGp0YkVwTy1za0Y0bjd2N0FTVGg4b0xnMG1rQWRRIn1
9.QgoJn9wkjFvM9bAr0hTDHLspuqdA21WzfBRVHkASa2ck4PFD3TC9MiZSi3AiRytRbYT4
ZzvkH3BSbm6vy68y62gj0A6OYvZ1Z60Wxho14bxZQveJZgw3u_lMvYj6GKiUtskypFEHU-
Kd-LoDVqEpf6lPQHdpsac__yQ_JL24oCEBlVQRXB-T-6ZNZfID6JafSkNNCYQbI8nXbzIE
p1LBFm0fE8eUd4G4yPYOj1SeuR6Gy92T0vAoL5QtpIAHo49oAmiSIj6DQNl2cNYs74jhrB
IcNZyt4l8H1lV20wS5OS3T0vXaYD13fgm0p4iWD9cVg3HKShUVulEyrSbq94jIKg.eyJhb
GciOiAiUlMyNTYiLCAia2lkIjogIkxkeVRYd0F5ZnJpcjRfVjZORzFSYzEwVThKZExZVHJ
FQktKaF9oNWlfclUifQ.eyJub25jZSI6ICJYWk9VY28xdV9nRVBrbnhTNzhzV1dnIiwgIm
F1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgInNkX3JlbGVhc2UiOiB7
ImdpdmVuX25hbWUiOiAie1wic1wiOiBcIjZJajd0TS1hNWlWUEdib1M1dG12VkFcIiwgXC
J2XCI6IFwiSm9oblwifSIsICJmYW1pbHlfbmFtZSI6ICJ7XCJzXCI6IFwiUWdfTzY0enFB
eGU0MTJhMTA4aXJvQVwiLCBcInZcIjogXCJEb2VcIn0iLCAiYWRkcmVzcyI6ICJ7XCJzXC
I6IFwiNWJQczFJcXVaTmEwaGthRnp6elpOd1wiLCBcInZcIjoge1wic3RyZWV0X2FkZHJl
c3NcIjogXCIxMjMgTWFpbiBTdFwiLCBcImxvY2FsaXR5XCI6IFwiQW55dG93blwiLCBcIn
JlZ2lvblwiOiBcIkFueXN0YXRlXCIsIFwiY291bnRyeVwiOiBcIlVTXCJ9fSJ9fQ.fw4xR
l7m1mDPCZvCTn3GOr2PgBZ--fTKfy7s-GuEifNvzW5KsJaBBFvzdZztm25XGhk29uw-XwE
w00r0hyxXLBvWfA0XbDK3JBmdpOSW1bEyNBdSHPJoeq9Xyts2JN40vJzU2UxNaLKDaEheW
f3F_E52yhHxvMLNdvZJ9FksJdSMK6ZCyGfRJadPN2GhNltqph52sWiFKUyUk_4RtwXmT_l
F49tWOMZqtG-akN9wrBoMsleM0soA0BXIK10rG5cKZoSNr-u2luzbdZx3CFdAenaqScIkl
uPPcrXBZGYyX2zYUbGQs2RRXnBmox_yl6CvLbb0qTTYhDnDEo_MH-ZtWw
</artwork>
<t>(Line breaks for presentation only.)</t>
</section>
</section>

<section anchor="verification-and-processing"><name>Verification and Processing</name>

<section anchor="verification-by-the-holder-when-receiving-sd-jwt-and-svc"><name>Verification by the Holder when Receiving SD-JWT and SVC</name>
<t>The holder SHOULD verify the binding between SD-JWT and SVC by performing the following steps:
 1. Check that all the claims in the SVC are present in the SD-JWT and that there are no claims in the SD-JWT that are not in the SVC
 2. Check that the hashes of the claims in the SVC match those in the SD-JWT</t>
</section>

<section anchor="verification-by-the-verifier-when-receiving-sd-jwt-and-sd-jwt-r"><name>Verification by the Verifier when Receiving SD-JWT and SD-JWT-R</name>
<t>Verifiers MUST follow <xref target="RFC8725"></xref> for checking the SD-JWT and, if signed, the
SD-JWT Release.</t>
<t>Verifiers MUST go through (at least) the following steps before
trusting/using any of the contents of an SD-JWT:</t>

<ol>
<li><t>Determine if holder binding is to be checked for the SD-JWT. Refer to <xref target="holder_binding_security"></xref> for details.</t>
</li>
<li><t>Check that the presentation consists of six period-separated (<tt>.</tt>) elements; if holder binding is not required, the last element can be empty.</t>
</li>
<li><t>Separate the SD-JWT from the SD-JWT Release.</t>
</li>
<li><t>Validate the SD-JWT:</t>

<ol>
<li><t>Ensure that a signing algorithm was used that was deemed secure for the application. Refer to <xref target="RFC8725"></xref>, Sections 3.1 and 3.2 for details.</t>
</li>
<li><t>Validate the signature over the SD-JWT.</t>
</li>
<li><t>Validate the issuer of the SD-JWT and that the signing key belongs to this issuer.</t>
</li>
<li><t>Check that the SD-JWT is valid using <tt>nbf</tt>, <tt>iat</tt>, and <tt>exp</tt> claims, if provided in the SD-JWT.</t>
</li>
<li><t>Check that the claim <tt>sd_digests</tt> is present in the SD-JWT.</t>
</li>
<li><t>Check that the <tt>sd_hash_alg</tt> claim is present and its value is understand
and the hash algorithm is deemed secure.</t>
</li>
</ol></li>
<li><t>Validate the SD-JWT Release:</t>

<ol>
<li><t>If holder binding is required, validate the signature over the SD-JWT using the same steps as for the SD-JWT plus the following steps:</t>

<ol>
<li><t>Determine that the public key for the private key that used to sign the SD-JWT-R is bound to the SD-JWT, i.e., the SD-JWT either contains a reference to the public key or contains the public key itself.</t>
</li>
<li><t>Determine that the SD-JWT-R is bound to the current transaction and was created for this verifier (replay protection). This is usually achieved by a <tt>nonce</tt> and <tt>aud</tt> field within the SD-JWT Release.</t>
</li>
</ol></li>
<li><t>For each claim in the SD-JWT Release:</t>

<ol>
<li><t>Ensure that the claim is present as well in <tt>sd_release</tt> in the SD-JWT.
If <tt>sd_release</tt> is structured, the claim MUST be present at the same
place within the structure.</t>
</li>
<li><t>Compute the base64url-encoded hash digest of the JSON literal released
by the Holder using the <tt>sd_hash_alg</tt> in SD-JWT.</t>
</li>
<li><t>Compare the hash digests computed in the previous step with the one of
the same claim in the SD-JWT. Accept the claim only when the two hash
digests match.</t>
</li>
<li><t>Ensure that the claim value in the SD-JWT-R is a JSON-encoded
object containing at least the keys <tt>s</tt> and <tt>v</tt>, and optionally <tt>n</tt>.</t>
</li>
<li><t>Store the value of the key <tt>v</tt> as the claim value. If <tt>n</tt> is contained
in the object, use the value of the key <tt>n</tt> as the claim name.</t>
</li>
</ol></li>
<li><t>Once all necessary claims have been verified, their values can be
validated and used according to the requirements of the application. It
MUST be ensured that all claims required for the application have been
released.</t>
</li>
</ol></li>
</ol>
<t>If any step fails, the input is not valid and processing MUST be aborted.</t>
</section>

<section anchor="processing_model"><name>Processing Model</name>
<t>Neither an SD-JWT nor an SD-JWT-R is suitable for direct use by an application.
Besides the REQUIRED verification steps listed above, it is further RECOMMENDED
that an application-consumable format is generated from the data released in
the SD-JWT-Release. The RECOMMENDED way is to merge the released claims and any
plaintext claims in the SD-JWT recursively:</t>

<ul>
<li><t>Objects from the released claims must be merged into existing objects from the SD-JWT.</t>
</li>
<li><t>If a key is present in both objects:</t>

<ul>
<li><t>If the value in the released claims is and object and the value in the
SD-JWT claims is an object, the two objects MUST be merged recursively.</t>
</li>
<li><t>Else, the value in the released claims MUST be used.</t>
</li>
</ul></li>
</ul>
<t>The keys <tt>sd_digests</tt> and <tt>sd_hash_alg</tt> SHOULD be removed prior to further
processing.</t>
<t>An example can be seen in Example 3 in the Appendix.</t>
</section>
</section>

<section anchor="security_considerations"><name>Security Considerations</name>

<section anchor="mandatory-hash-computation-of-the-revealed-claim-values-by-the-verifier"><name>Mandatory hash computation of the revealed claim values by the Verifier</name>
<t>ToDo: add text explaining mechanisms that should be adopted to ensure that
  verifiers validate the claim values received in SD-JWT-R by calculating the
  hashes of those values and comparing them with the hashes in the SD-JWT:
  - create a test suite that forces hash computation by the Verifiers,
    and includes negative test cases in test vectors
  - use only implementations/libraries that are compliant to the test suite
  - etc.</t>
</section>

<section anchor="mandatory-signing-of-the-sd-jwt"><name>Mandatory signing of the SD-JWT</name>
<t>The SD-JWT MUST be signed by the issuer to protect integrity of the issued
claims. An attacker can modify or add claims if an SD-JWT is not signed (e.g.,
change the &quot;email&quot; attribute to take over the victim's account or add an
attribute indicating a fake academic qualification).</t>
<t>The verifier MUST always check the SD-JWT signature to ensure that the SD-JWT
has not been tampered with since its issuance. If the signature on the SD-JWT
cannot be verified, the SD-JWT MUST be rejected.</t>
</section>

<section anchor="entropy-and-uniqueness-of-the-salt"><name>Entropy and Uniqueness of the salt</name>
<t>The security model relies on the fact that the salt is not learned or guessed by
the attacker. It is vitally important to adhere to this principle. As such, the
salt MUST be created in such a manner that it is cryptographically random,
long enough and has high entropy that it is not practical for the attacker to
guess. Each salt value MUST be unique.</t>
</section>

<section anchor="minimum-length-of-the-salt"><name>Minimum length of the salt</name>
<t>The length of the randomly-generated portion of the salt MUST be at least 128 bits.</t>
</section>

<section anchor="choice-of-a-hash-function"><name>Choice of a hash function</name>
<t>For the security of this scheme, the hash function is required to be preimage and collision
resistant, i.e., it is infeasible to calculate the salt and claim value that result in
a particular digest, and it is infeasible to find a different salt and claim value pair that
result in a matching digest, respectively.</t>
<t>Furthermore the hash algorithms MD2, MD4, MD5, RIPEMD-160, and SHA-1
revealed fundamental weaknesses and they MUST NOT be used.</t>
</section>

<section anchor="holder_binding_security"><name>Holder Binding</name>
<t>TBD</t>
</section>

<section anchor="blinding-claim-names"><name>Blinding Claim Names</name>
<t>Issuers that chose to blind claim names MUST ensure not to inadvertently leak
information about the blinded claim names to verifiers. In particular, issuers
MUST choose placeholder claim names accordingly. It is RECOMMENDED to use
cryptographically random values with at least 128 bits of entropy as placeholder
claim names.</t>
<t>The order of elements in JSON-encoded objects is not relevant to applications,
but the order may reveal information about the blinded claim name to the
verifier. It is therefore RECOMMENDED to ensure that the order is shuffled or
otherwise hidden (e.g., alphabetically ordered using the blinded claim names).</t>
</section>
</section>

<section anchor="privacy_considerations"><name>Privacy Considerations</name>

<section anchor="claim-names"><name>Claim Names</name>
<t>By default, claim names are not blinded in an SD-JWT. In this case, even when
the claim's value is not known to a verifier, the claim name can disclose some
information to the verifier. For example, if the SD-JWT contains a claim named
<tt>super_secret_club_membership_no</tt>, the verifier might assume that the end-user
is a member of the Super Secret Club.</t>
<t>Blinding claim names can help to avoid this potential privacy issue. In many
cases, however, verifiers can already deduce this or similar information just
from the identification of the issuer and the schema used for the SD-JWT.
Blinding claim names might not provide additional privacy if this is the case.</t>
<t>Furthermore, re-using the same value to blind a claim name may limit the privacy benefits.</t>
</section>

<section anchor="unlinkability"><name>Unlinkability</name>
<t>Colluding issuer/verifier or verifier/verifier pairs could link issuance/presentation or two presentation sessions
to the same user on the basis of unique values encoded in the SD-JWT
(issuer signature, salts, digests, etc.). More advanced cryptographic schemes, outside the scope of
this specification, can be used to prevent this type of linkability.</t>
</section>
</section>

<section anchor="Acknowledgements"><name>Acknowledgements</name>
<t>We would like to thank
Alen Horvat,
Brian Campbell,
Christian Paquin,
Fabian Hauck,
Giuseppe De Marco,
Kushal Das,
Mike Jones,
Nat Sakimura,
Pieter Kasselman, and
Torsten Lodderstedt
for their contributions (some of which substantial) to this draft and to the initial set of implementations.</t>
<t>The work on this draft was started at OAuth Security Workshop 2022 in Trondheim, Norway.</t>
</section>

<section anchor="iana_considerations"><name>IANA Considerations</name>
<t>TBD</t>
</section>

</middle>

<back>
<references><name>Normative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
</references>
<references><name>Informative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8725.xml"/>
<reference anchor="VC_DATA" target="https://www.w3.org/TR/vc_data">
  <front>
    <title>Verifiable Credentials Data Model 1.0</title>
    <author fullname="Manu Sporny">
      <organization>Digital Bazaar</organization>
    </author>
    <author fullname="Grant Noble">
      <organization>ConsenSys</organization>
    </author>
    <author fullname="Dave Longley">
      <organization>Digital Bazaar</organization>
    </author>
    <author fullname="Daniel C. Burnett">
      <organization>ConsenSys</organization>
    </author>
    <author fullname="Brent Zundel">
      <organization>Evernym</organization>
    </author>
    <author fullname="David Chadwick">
      <organization>University of Kent</organization>
    </author>
    <date year="2019" month="Nov" day="19"></date>
  </front>
</reference>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7800.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8785.xml"/>
</references>

<section anchor="additional-examples"><name>Additional Examples</name>

<section anchor="example-2-structured-sd-jwt"><name>Example 2 - Structured SD-JWT</name>
<t>This non-normative example is based on the same claim values as Example 1, but
this time the issuer decided to create a structured object for the hashes. This
allows for the release of individual members of the address claim separately.</t>

<sourcecode anchor="example-simple_structured-sd_jwt_payload" type="json">{
  &quot;iss&quot;: &quot;https://example.com/issuer&quot;,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;: &quot;RSA&quot;,
      &quot;n&quot;: &quot;pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw&quot;,
      &quot;e&quot;: &quot;AQAB&quot;
    }
  },
  &quot;iat&quot;: 1516239022,
  &quot;exp&quot;: 1516247022,
  &quot;sd_hash_alg&quot;: &quot;sha-256&quot;,
  &quot;sd_digests&quot;: {
    &quot;sub&quot;: &quot;OMdwkk2HPuiInPypWUWMxot1Y2tStGsLuIcDMjKdXMU&quot;,
    &quot;given_name&quot;: &quot;AfKKH4a0IZki8MFDythFaFS_Xqzn-wRvAMfiy_VjYpE&quot;,
    &quot;family_name&quot;: &quot;eUmXmry32JiK_76xMasagkAQQsmSVdW57Ajk18riSF0&quot;,
    &quot;email&quot;: &quot;-Rcr4fDyjwlM_itcMxoQZCE1QAEwyLJcibEpH114KiE&quot;,
    &quot;phone_number&quot;: &quot;Jv2nw0C1wP5ASutYNAxrWEnaDRIpiF0eTUAkUOp8F6Y&quot;,
    &quot;address&quot;: {
      &quot;street_address&quot;: &quot;n25N6kth9N0CwjZXHeth1gfovg8_I8fGyzeY0qeLp0k&quot;,
      &quot;locality&quot;: &quot;gJVL_TKoT_SbA4_sv0klLTkg-YEGzVUkC-6egxegsz0&quot;,
      &quot;region&quot;: &quot;zXbstGPuPq2cPJfyD_-HlmqVyFMf03xH-FbeotXxdbo&quot;,
      &quot;country&quot;: &quot;pN-5CZ5hbumsPvLKUADm4Ott6gu0E4xj09s4Z51yb8U&quot;
    },
    &quot;birthdate&quot;: &quot;UxsvgkUgPnawP6wY4hmxJ_jqiNNKni62zrX7hQOUsys&quot;
  }
}
</sourcecode>
<t>The SVC for this SD-JWT is as follows:</t>

<sourcecode anchor="example-simple_structured-svc_payload" type="json">{
  &quot;sd_release&quot;: {
    &quot;sub&quot;: &quot;{\&quot;s\&quot;: \&quot;2GLC42sKQveCfGfryNRN9w\&quot;, \&quot;v\&quot;: \&quot;6c5c0a49-b589-431d-bae7-219122a9ec2c\&quot;}&quot;,
    &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;}&quot;,
    &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;}&quot;,
    &quot;email&quot;: &quot;{\&quot;s\&quot;: \&quot;Pc33JM2LchcU_lHggv_ufQ\&quot;, \&quot;v\&quot;: \&quot;johndoe@example.com\&quot;}&quot;,
    &quot;phone_number&quot;: &quot;{\&quot;s\&quot;: \&quot;lklxF5jMYlGTPUovMNIvCA\&quot;, \&quot;v\&quot;: \&quot;+1-202-555-0101\&quot;}&quot;,
    &quot;address&quot;: {
      &quot;street_address&quot;: &quot;{\&quot;s\&quot;: \&quot;5bPs1IquZNa0hkaFzzzZNw\&quot;, \&quot;v\&quot;: \&quot;123 Main St\&quot;}&quot;,
      &quot;locality&quot;: &quot;{\&quot;s\&quot;: \&quot;y1sVU5wdfJahVdgwPgS7RQ\&quot;, \&quot;v\&quot;: \&quot;Anytown\&quot;}&quot;,
      &quot;region&quot;: &quot;{\&quot;s\&quot;: \&quot;C9GSoujviJquEgYfojCb1A\&quot;, \&quot;v\&quot;: \&quot;Anystate\&quot;}&quot;,
      &quot;country&quot;: &quot;{\&quot;s\&quot;: \&quot;H3o1uswP760Fi2yeGdVCEQ\&quot;, \&quot;v\&quot;: \&quot;US\&quot;}&quot;
    },
    &quot;birthdate&quot;: &quot;{\&quot;s\&quot;: \&quot;M0Jb57t41ubrkSuyrDT3xA\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;}&quot;
  }
}
</sourcecode>
<t>An SD-JWT-R for the SD-JWT above that discloses only <tt>region</tt> and <tt>country</tt> of
the <tt>address</tt> property:</t>

<sourcecode anchor="example-simple_structured-sd_jwt_release_payload" type="json">{
  &quot;nonce&quot;: &quot;XZOUco1u_gEPknxS78sWWg&quot;,
  &quot;aud&quot;: &quot;https://example.com/verifier&quot;,
  &quot;sd_release&quot;: {
    &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;}&quot;,
    &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;}&quot;,
    &quot;birthdate&quot;: &quot;{\&quot;s\&quot;: \&quot;M0Jb57t41ubrkSuyrDT3xA\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;}&quot;,
    &quot;address&quot;: {
      &quot;region&quot;: &quot;{\&quot;s\&quot;: \&quot;C9GSoujviJquEgYfojCb1A\&quot;, \&quot;v\&quot;: \&quot;Anystate\&quot;}&quot;,
      &quot;country&quot;: &quot;{\&quot;s\&quot;: \&quot;H3o1uswP760Fi2yeGdVCEQ\&quot;, \&quot;v\&quot;: \&quot;US\&quot;}&quot;
    }
  }
}
</sourcecode>
</section>

<section anchor="example-3-complex-structured-sd-jwt"><name>Example 3 - Complex Structured SD-JWT</name>
<t>In this example, a complex object such as those used for OIDC4IDA (todo reference) is used.</t>
<t>In this example, the Issuer is using a following object as a set of selective disclosure claims to issue to the Holder:</t>

<sourcecode anchor="example-complex-user_claims" type="json">{
  &quot;verified_claims&quot;: {
    &quot;verification&quot;: {
      &quot;trust_framework&quot;: &quot;de_aml&quot;,
      &quot;time&quot;: &quot;2012-04-23T18:25Z&quot;,
      &quot;verification_process&quot;: &quot;f24c6f-6d3f-4ec5-973e-b0d8506f3bc7&quot;,
      &quot;evidence&quot;: [
        {
          &quot;type&quot;: &quot;document&quot;,
          &quot;method&quot;: &quot;pipp&quot;,
          &quot;time&quot;: &quot;2012-04-22T11:30Z&quot;,
          &quot;document&quot;: {
            &quot;type&quot;: &quot;idcard&quot;,
            &quot;issuer&quot;: {
              &quot;name&quot;: &quot;Stadt Augsburg&quot;,
              &quot;country&quot;: &quot;DE&quot;
            },
            &quot;number&quot;: &quot;53554554&quot;,
            &quot;date_of_issuance&quot;: &quot;2010-03-23&quot;,
            &quot;date_of_expiry&quot;: &quot;2020-03-22&quot;
          }
        }
      ]
    },
    &quot;claims&quot;: {
      &quot;given_name&quot;: &quot;Max&quot;,
      &quot;family_name&quot;: &quot;Meier&quot;,
      &quot;nationalities&quot;: [
        &quot;DE&quot;
      ],
      &quot;address&quot;: {
        &quot;locality&quot;: &quot;Maxstadt&quot;,
        &quot;postal_code&quot;: &quot;12344&quot;,
        &quot;country&quot;: &quot;DE&quot;,
        &quot;street_address&quot;: &quot;An der Weide 22&quot;
      }
    }
  },
  &quot;birth_middle_name&quot;: &quot;Timotheus&quot;,
  &quot;salutation&quot;: &quot;Dr.&quot;,
  &quot;msisdn&quot;: &quot;49123456789&quot;
}
</sourcecode>
<t>The issuer in this example further adds the two claims <tt>birthdate</tt> and <tt>place_of_birth</tt> to the <tt>claims</tt> element in plain text. The following shows the resulting SD-JWT payload:</t>

<sourcecode anchor="example-complex-sd_jwt_payload" type="json">{
  &quot;iss&quot;: &quot;https://example.com/issuer&quot;,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;: &quot;RSA&quot;,
      &quot;n&quot;: &quot;pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw&quot;,
      &quot;e&quot;: &quot;AQAB&quot;
    }
  },
  &quot;iat&quot;: 1516239022,
  &quot;exp&quot;: 1516247022,
  &quot;sd_hash_alg&quot;: &quot;sha-256&quot;,
  &quot;sd_digests&quot;: {
    &quot;verified_claims&quot;: {
      &quot;verification&quot;: {
        &quot;trust_framework&quot;: &quot;T7ivxsfuy-nAuECeh0utPEX8cSlc7QflJDE0RqtWDMU&quot;,
        &quot;time&quot;: &quot;_ecCQoXSR8t9esur66ZwWwC6u4xLuVELjmwFgpRZqcQ&quot;,
        &quot;verification_process&quot;: &quot;BolwKKvU8N7uUhjN2aGH2T54wjXpkcOz5sC9PkIP4s4&quot;,
        &quot;evidence&quot;: [
          {
            &quot;type&quot;: &quot;7jBlUZkZn1Gfj9mybqlJGzTb2z8KcNNHU0IV4B8MxOM&quot;,
            &quot;method&quot;: &quot;BRQgcT09gdBqO-MLTka8d6dlCshZCUNpFgsZoet5I-o&quot;,
            &quot;time&quot;: &quot;-PVLNSmbkCHLp8S7i077YnHZV0yE8gyKWLpWV2o8FJE&quot;,
            &quot;document&quot;: {
              &quot;type&quot;: &quot;vzDHD-6hQqZ5lSw_7acK1lErxSh3E6dO0zlUYM2hDvw&quot;,
              &quot;issuer&quot;: {
                &quot;name&quot;: &quot;us9T9ufVdSmytSmjrtdN_TUI0ai3_JNM3q-0qx0CXk4&quot;,
                &quot;country&quot;: &quot;uItKtPRZQBB9v5THHOdi02ALjD0MH0U6jjHDLe91NnY&quot;
              },
              &quot;number&quot;: &quot;QNNXwo3siOWdqNivKBnFsD4X8gZxVIgu3tv6dfpZhUc&quot;,
              &quot;date_of_issuance&quot;: &quot;AYWQphnOlFFN9oSVvtBr_iYCKYlucTi3lsMrXebebgc&quot;,
              &quot;date_of_expiry&quot;: &quot;JIk-APYHW3qy60rvGyFswDCTMfAbBXZyyrZEn8NsBhU&quot;
            }
          }
        ]
      },
      &quot;claims&quot;: {
        &quot;given_name&quot;: &quot;hZtT6FZBzxAeByDUkFJTeqTCpTd2cQKx6MDPkGvVCRE&quot;,
        &quot;family_name&quot;: &quot;5yLYGVxPSfXynhcopbIcrFe0_sMGxv_-6THZAu4eWnU&quot;,
        &quot;nationalities&quot;: &quot;BxCtneHl-RQoL24tS8AaywfyHpnZSq9tUsNDyrYFLYY&quot;,
        &quot;address&quot;: {
          &quot;locality&quot;: &quot;ah6QI8ceduHKP7uiHbwZ2a2LYkxjibHaoWG3M6x1ip4&quot;,
          &quot;postal_code&quot;: &quot;Auci5Y0jrp_3ahg_IW_Z-mqBaE9BrrItR6o7ekhEGBo&quot;,
          &quot;country&quot;: &quot;RAKTJg_m1tcoyGI1O2qgQm4KD2d2abXhU4IS7c6RVjU&quot;,
          &quot;street_address&quot;: &quot;iKkk1nJHTBKTkEt2TNMkZf69WYkiDYaQL6ZzDZmGO1M&quot;
        }
      }
    },
    &quot;birth_middle_name&quot;: &quot;KpRjGCm3uykvCGFIDrVJ7iTMQhWakBmCItHbAa6vnZE&quot;,
    &quot;salutation&quot;: &quot;IoY5e03e65CUrnaMcRDmPCm0RWPEFE4mVkoCsK86agA&quot;,
    &quot;msisdn&quot;: &quot;XupJick4P8bxaz20kx_VOwbGU1cgslhAUG6IE-tDjms&quot;
  },
  &quot;verified_claims&quot;: {
    &quot;claims&quot;: {
      &quot;birthdate&quot;: &quot;1956-01-28&quot;,
      &quot;place_of_birth&quot;: {
        &quot;country&quot;: &quot;DE&quot;,
        &quot;locality&quot;: &quot;Musterstadt&quot;
      }
    }
  }
}
</sourcecode>
<t>The SD-JWT is then signed by the issuer to create a document like the following:</t>

<artwork anchor="example-complex-serialized_sd_jwt">eyJhbGciOiAiUlMyNTYiLCAia2lkIjogImNBRUlVcUowY21MekQxa3pHemhlaUJhZzBZUk
F6VmRsZnhOMjgwTmdIYUEifQ.eyJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1Z
XIiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJSU0EiLCAibiI6ICJwbTRiT0hCZy1vWWh
BeVBXelI1NkFXWDNyVUlYcDExX0lDRGtHZ1M2VzNaV0x0cy1oendJM3g2NTY1OWtnNGhWb
zlkYkdvQ0pFM1pHRl9lYWV0RTMwVWhCVUVncEd3ckRyUWlKOXpxcHJtY0ZmcjNxdnZrR2p
0dGg4WmdsMWVNMmJKY093RTdQQ0JIV1RLV1lzMTUyUjdnNkpnMk9WcGgtYThycS1xNzlNa
EtHNVFvV19tVHoxMFFUXzZINGM3UGpXRzFmamg4aHBXTm5iUF9wdjZkMXpTd1pmYzVmbDZ
5VlJMMERWMFYzbEdIS2UyV3FmX2VOR2pCckJMVmtsRFRrOC1zdFhfTVdMY1ItRUdtWEFPd
jBVQldpdFNfZFhKS0p1LXZYSnl3MTRuSFNHdXhUSUsyaHgxcHR0TWZ0OUNzdnFpbVhLZUR
UVTE0cVFMMWVFN2loY3ciLCAiZSI6ICJBUUFCIn19LCAiaWF0IjogMTUxNjIzOTAyMiwgI
mV4cCI6IDE1MTYyNDcwMjIsICJzZF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwgInNkX2RpZ2V
zdHMiOiB7InZlcmlmaWVkX2NsYWltcyI6IHsidmVyaWZpY2F0aW9uIjogeyJ0cnVzdF9mc
mFtZXdvcmsiOiAiVDdpdnhzZnV5LW5BdUVDZWgwdXRQRVg4Y1NsYzdRZmxKREUwUnF0V0R
NVSIsICJ0aW1lIjogIl9lY0NRb1hTUjh0OWVzdXI2Nlp3V3dDNnU0eEx1VkVMam13RmdwU
lpxY1EiLCAidmVyaWZpY2F0aW9uX3Byb2Nlc3MiOiAiQm9sd0tLdlU4Tjd1VWhqTjJhR0g
yVDU0d2pYcGtjT3o1c0M5UGtJUDRzNCIsICJldmlkZW5jZSI6IFt7InR5cGUiOiAiN2pCb
FVaa1puMUdmajlteWJxbEpHelRiMno4S2NOTkhVMElWNEI4TXhPTSIsICJtZXRob2QiOiA
iQlJRZ2NUMDlnZEJxTy1NTFRrYThkNmRsQ3NoWkNVTnBGZ3Nab2V0NUktbyIsICJ0aW1lI
jogIi1QVkxOU21ia0NITHA4UzdpMDc3WW5IWlYweUU4Z3lLV0xwV1YybzhGSkUiLCAiZG9
jdW1lbnQiOiB7InR5cGUiOiAidnpESEQtNmhRcVo1bFN3XzdhY0sxbEVyeFNoM0U2ZE8we
mxVWU0yaER2dyIsICJpc3N1ZXIiOiB7Im5hbWUiOiAidXM5VDl1ZlZkU215dFNtanJ0ZE5
fVFVJMGFpM19KTk0zcS0wcXgwQ1hrNCIsICJjb3VudHJ5IjogInVJdEt0UFJaUUJCOXY1V
EhIT2RpMDJBTGpEME1IMFU2ampIRExlOTFOblkifSwgIm51bWJlciI6ICJRTk5Yd28zc2l
PV2RxTml2S0JuRnNENFg4Z1p4VklndTN0djZkZnBaaFVjIiwgImRhdGVfb2ZfaXNzdWFuY
2UiOiAiQVlXUXBobk9sRkZOOW9TVnZ0QnJfaVlDS1lsdWNUaTNsc01yWGViZWJnYyIsICJ
kYXRlX29mX2V4cGlyeSI6ICJKSWstQVBZSFczcXk2MHJ2R3lGc3dEQ1RNZkFiQlhaeXlyW
kVuOE5zQmhVIn19XX0sICJjbGFpbXMiOiB7ImdpdmVuX25hbWUiOiAiaFp0VDZGWkJ6eEF
lQnlEVWtGSlRlcVRDcFRkMmNRS3g2TURQa0d2VkNSRSIsICJmYW1pbHlfbmFtZSI6ICI1e
UxZR1Z4UFNmWHluaGNvcGJJY3JGZTBfc01HeHZfLTZUSFpBdTRlV25VIiwgIm5hdGlvbmF
saXRpZXMiOiAiQnhDdG5lSGwtUlFvTDI0dFM4QWF5d2Z5SHBuWlNxOXRVc05EeXJZRkxZW
SIsICJhZGRyZXNzIjogeyJsb2NhbGl0eSI6ICJhaDZRSThjZWR1SEtQN3VpSGJ3WjJhMkx
Za3hqaWJIYW9XRzNNNngxaXA0IiwgInBvc3RhbF9jb2RlIjogIkF1Y2k1WTBqcnBfM2FoZ
19JV19aLW1xQmFFOUJyckl0UjZvN2VraEVHQm8iLCAiY291bnRyeSI6ICJSQUtUSmdfbTF
0Y295R0kxTzJxZ1FtNEtEMmQyYWJYaFU0SVM3YzZSVmpVIiwgInN0cmVldF9hZGRyZXNzI
jogImlLa2sxbkpIVEJLVGtFdDJUTk1rWmY2OVdZa2lEWWFRTDZaekRabUdPMU0ifX19LCA
iYmlydGhfbWlkZGxlX25hbWUiOiAiS3BSakdDbTN1eWt2Q0dGSURyVko3aVRNUWhXYWtCb
UNJdEhiQWE2dm5aRSIsICJzYWx1dGF0aW9uIjogIklvWTVlMDNlNjVDVXJuYU1jUkRtUEN
tMFJXUEVGRTRtVmtvQ3NLODZhZ0EiLCAibXNpc2RuIjogIlh1cEppY2s0UDhieGF6MjBre
F9WT3diR1UxY2dzbGhBVUc2SUUtdERqbXMifSwgInZlcmlmaWVkX2NsYWltcyI6IHsiY2x
haW1zIjogeyJiaXJ0aGRhdGUiOiAiMTk1Ni0wMS0yOCIsICJwbGFjZV9vZl9iaXJ0aCI6I
HsiY291bnRyeSI6ICJERSIsICJsb2NhbGl0eSI6ICJNdXN0ZXJzdGFkdCJ9fX19.h3d682
fP_x2tqYiUR4y2ftsWE8DHOyg0VFY4q9jUAH7yCk7KExyDUBaiyLrFhgFmJHWzkFoggcST
LsvOAM1QB7kgOilwNW8KKtZpSQV2Db7WEmXi-Q2QblSNGVNXAcZMobLnl6j4QJJaW-5xLb
H-6S1Fe2Vw2hn3rQ2VLzPTUZjzCWk3OdLWTI5MlaYr9GleK9ZDErlrCXtfsXRY6M-Smvb8
ZvIDs95vGxsJW-6SbasuonTunzZGdt2WqXFRtXuaCb-Vw9wPXuytHmH_1vuyROhH8ITzqY
bTZ-4H6eS5BLjx8HXWQDk3r-M_g9htP9G3ezhDi3uzLQ2dSAbNqOWiXQ
</artwork>
<t>(Line breaks for presentation only.)</t>
<t>An SD-JWT-R for some of the claims may look as follows:</t>

<sourcecode anchor="example-complex-sd_jwt_release_payload" type="json">{
  &quot;nonce&quot;: &quot;XZOUco1u_gEPknxS78sWWg&quot;,
  &quot;aud&quot;: &quot;https://example.com/verifier&quot;,
  &quot;sd_release&quot;: {
    &quot;verified_claims&quot;: {
      &quot;verification&quot;: {
        &quot;trust_framework&quot;: &quot;{\&quot;s\&quot;: \&quot;2GLC42sKQveCfGfryNRN9w\&quot;, \&quot;v\&quot;: \&quot;de_aml\&quot;}&quot;,
        &quot;time&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;2012-04-23T18:25Z\&quot;}&quot;,
        &quot;evidence&quot;: [
          {
            &quot;type&quot;: &quot;{\&quot;s\&quot;: \&quot;Pc33JM2LchcU_lHggv_ufQ\&quot;, \&quot;v\&quot;: \&quot;document\&quot;}&quot;
          }
        ]
      },
      &quot;claims&quot;: {
        &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;4KyR32oIZt-zkWvFqbULKg\&quot;, \&quot;v\&quot;: \&quot;Max\&quot;}&quot;,
        &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;flNP1ncMz9Lg-c9qMIz_9g\&quot;, \&quot;v\&quot;: \&quot;Meier\&quot;}&quot;
      }
    }
  }
}
</sourcecode>
<t>After verifying the SD-JWT and SD-JWT-R, the verifier merges the selectively
disclosed claims into the other data contained in the JWT. The verifier will
then pass the result on to the application for further processing:</t>

<sourcecode anchor="example-complex-merged" type="json">{
  &quot;verified_claims&quot;: {
    &quot;verification&quot;: {
      &quot;trust_framework&quot;: &quot;de_aml&quot;,
      &quot;time&quot;: &quot;2012-04-23T18:25Z&quot;,
      &quot;evidence&quot;: [
        {
          &quot;type&quot;: &quot;document&quot;
        }
      ]
    },
    &quot;claims&quot;: {
      &quot;given_name&quot;: &quot;Max&quot;,
      &quot;family_name&quot;: &quot;Meier&quot;,
      &quot;birthdate&quot;: &quot;1956-01-28&quot;,
      &quot;place_of_birth&quot;: {
        &quot;country&quot;: &quot;DE&quot;,
        &quot;locality&quot;: &quot;Musterstadt&quot;
      }
    }
  },
  &quot;iss&quot;: &quot;https://example.com/issuer&quot;,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;: &quot;RSA&quot;,
      &quot;n&quot;: &quot;pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw&quot;,
      &quot;e&quot;: &quot;AQAB&quot;
    }
  },
  &quot;iat&quot;: 1516239022,
  &quot;exp&quot;: 1516247022
}
</sourcecode>
</section>

<section anchor="example-4-w3c-verifiable-credentials-data-model"><name>Example 4 - W3C Verifiable Credentials Data Model</name>
<t>This example illustrates how the artifacts defined in this specification can be
represented using W3C Verifiable Credentials Data Model as defined in
<xref target="VC_DATA"></xref>.</t>
<t>SD-JWT is equivalent to an issuer-signed W3C Verifiable Credential (VC). SVC is sent alongside a VC.</t>
<t>SD-JWT-Release is equivalent to a holder-signed W3C Verifiable Presentation (VP).</t>
<t>SD-JWT-Release as a VP contains a <tt>verifiableCredential</tt> claim inside a <tt>vp</tt> claim that is a string array of an SD-JWT as a VC using JWT compact serialization.</t>
<t>Below is a non-normative example of an SD-JWT represented as a verifiable credential
encoded as JSON and signed as JWS compliant to <xref target="VC_DATA"></xref>.</t>
<t>SVC sent alongside this SD-JWT as a JWT-VC is same as in Example 1.</t>

<sourcecode type="json">{
  &quot;sub&quot;: &quot;urn:ietf:params:oauth:jwk-thumbprint:sha-256:NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs&quot;,
  &quot;jti&quot;: &quot;http://example.edu/credentials/3732&quot;,
  &quot;iss&quot;: &quot;https://example.com/keys/foo.jwk&quot;,
  &quot;nbf&quot;: 1541493724,
  &quot;iat&quot;: 1541493724,
  &quot;exp&quot;: 1573029723,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;:&quot;RSA&quot;,
      &quot;n&quot;: &quot;0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx
     4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMs
     tn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2
     QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbI
     SD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqb
     w0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw&quot;,
      &quot;e&quot;:&quot;AQAB&quot;
    }
  },
  &quot;vc&quot;: {
    &quot;@context&quot;: [
      &quot;https://www.w3.org/2018/credentials/v1&quot;,
      &quot;https://www.w3.org/2018/credentials/examples/v1&quot;
    ],
    &quot;type&quot;: [
      &quot;VerifiableCredential&quot;,
      &quot;UniversityDegreeCredential&quot;
    ],
    &quot;credentialSubject&quot;: {
      &quot;first_name&quot;: &quot;Jane&quot;,
      &quot;last_name&quot;: &quot;Doe&quot;
    }
  },
  &quot;sd_digests&quot;: {
    &quot;vc&quot;: {
      &quot;credentialSubject&quot;: {
        &quot;email&quot;: &quot;ET2A1JQLF85ZpBulh6UFstGrSfR4B3KM-bjQVllhxqY&quot;,
        &quot;phone_number&quot;: &quot;SJnciB2DIRVA5cXBrdKoH6n45788mZyUn2rnv74uMVU&quot;,
        &quot;address&quot;: &quot;0FldqLfGnERPPVDC17od9xb4w3iRJTEQbW_Yk9AmnDw&quot;,
        &quot;birthdate&quot;: &quot;-L0kMgIbLXe3OEkKTUGwz_QKhjehDeofKGwoPrxLuo4&quot;
      }
    }
  }
}
</sourcecode>
<t>Below is a non-normative example of an SD-JWT-R represented as a verifiable presentation
encoded as JSON and signed as a JWS compliant to <xref target="VC_DATA"></xref>.</t>

<sourcecode type="json">{
  &quot;alg&quot;: &quot;RS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;,
  &quot;jwk&quot;: {
      &quot;kty&quot;:&quot;RSA&quot;,
      &quot;n&quot;: &quot;0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx
     4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMs
     tn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2
     QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbI
     SD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqb
     w0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw&quot;,
      &quot;e&quot;:&quot;AQAB&quot;
    }
}.{
  &quot;iss&quot;: &quot;urn:ietf:params:oauth:jwk-thumbprint:sha-256:NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs&quot;,
  &quot;aud&quot;: &quot;s6BhdRkqt3&quot;,
  &quot;nbf&quot;: 1560415047,
  &quot;iat&quot;: 1560415047,
  &quot;exp&quot;: 1573029723,
  &quot;nonce&quot;: &quot;660!6345FSer&quot;,
  &quot;vp&quot;: {
    &quot;@context&quot;: [
      &quot;https://www.w3.org/2018/credentials/v1&quot;
    ],
    &quot;type&quot;: [
      &quot;VerifiablePresentation&quot;
    ],
    &quot;verifiableCredential&quot;: [&quot;eyJhb...npyXw&quot;]
  },
  &quot;sd_release&quot;: {
    &quot;email&quot;: &quot;[\&quot;eI8ZWm9QnKPpNPeNenHdhQ\&quot;, \&quot;johndoe@example.com\&quot;]&quot;,
    &quot;phone_number&quot;: &quot;[\&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;+1-202-555-0101\&quot;]&quot;,
    &quot;address&quot;: &quot;[\&quot;AJx-095VPrpTtN4QMOqROA\&quot;, {\&quot;street_address\&quot;: \&quot;123 Main St\&quot;, \&quot;locality\&quot;: \&quot;Anytown\&quot;, \&quot;region\&quot;: \&quot;Anystate\&quot;, \&quot;country\&quot;: \&quot;US\&quot;}]&quot;,
    &quot;birthdate&quot;: &quot;[\&quot;Pc33JM2LchcU_lHggv_ufQ\&quot;, \&quot;1940-01-01\&quot;]&quot;
  }
}
</sourcecode>
</section>
</section>

<section anchor="blinding-claim-names-1"><name>Blinding Claim Names</name>

<section anchor="example-5-some-blinded-claims"><name>Example 5: Some Blinded Claims</name>
<t>The following shows the user information used in this example, included a claim named <tt>secret_club_membership_no</tt>:</t>

<sourcecode anchor="example-simple_structured_some_blinded-user_claims" type="json">{
  &quot;sub&quot;: &quot;6c5c0a49-b589-431d-bae7-219122a9ec2c&quot;,
  &quot;given_name&quot;: &quot;John&quot;,
  &quot;family_name&quot;: &quot;Doe&quot;,
  &quot;email&quot;: &quot;johndoe@example.com&quot;,
  &quot;phone_number&quot;: &quot;+1-202-555-0101&quot;,
  &quot;secret_club_membership_no&quot;: &quot;23&quot;,
  &quot;other_secret_club_membership_no&quot;: &quot;42&quot;,
  &quot;address&quot;: {
    &quot;street_address&quot;: &quot;123 Main St&quot;,
    &quot;locality&quot;: &quot;Anytown&quot;,
    &quot;region&quot;: &quot;Anystate&quot;,
    &quot;country&quot;: &quot;US&quot;
  },
  &quot;birthdate&quot;: &quot;1940-01-01&quot;
}
</sourcecode>
<t>Hiding just this claim, the following SD-JWT payload would result:</t>

<sourcecode anchor="example-simple_structured_some_blinded-sd_jwt_payload" type="json">{
  &quot;iss&quot;: &quot;https://example.com/issuer&quot;,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;: &quot;RSA&quot;,
      &quot;n&quot;: &quot;pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw&quot;,
      &quot;e&quot;: &quot;AQAB&quot;
    }
  },
  &quot;iat&quot;: 1516239022,
  &quot;exp&quot;: 1516247022,
  &quot;sd_hash_alg&quot;: &quot;sha-256&quot;,
  &quot;sd_digests&quot;: {
    &quot;sub&quot;: &quot;OMdwkk2HPuiInPypWUWMxot1Y2tStGsLuIcDMjKdXMU&quot;,
    &quot;given_name&quot;: &quot;AfKKH4a0IZki8MFDythFaFS_Xqzn-wRvAMfiy_VjYpE&quot;,
    &quot;family_name&quot;: &quot;eUmXmry32JiK_76xMasagkAQQsmSVdW57Ajk18riSF0&quot;,
    &quot;email&quot;: &quot;-Rcr4fDyjwlM_itcMxoQZCE1QAEwyLJcibEpH114KiE&quot;,
    &quot;phone_number&quot;: &quot;Jv2nw0C1wP5ASutYNAxrWEnaDRIpiF0eTUAkUOp8F6Y&quot;,
    &quot;5a2W0_NrlEZzfqmk_7Pq-w&quot;: &quot;gc8VzGTImYRXzP6j7q5RomXt2C_wtsOJ3hAHJdTuEIY&quot;,
    &quot;other_secret_club_membership_no&quot;: &quot;IirAwgN-MubteYvJ4fmq04p9PnpRTf7hqg0dzSWRboA&quot;,
    &quot;address&quot;: {
      &quot;street_address&quot;: &quot;o_yJIdfhKuKVzOF7i1EuakzC5ghd99CX8_nitm-DsRM&quot;,
      &quot;locality&quot;: &quot;ogNqsvRqK0-ZPZc9C3Z4_6APvywm-lrm0oF2gcVtl_4&quot;,
      &quot;region&quot;: &quot;8kFihRLSkEheK0zbEsQ3zKXt8csE6OXJE_jv3032BbU&quot;,
      &quot;country&quot;: &quot;11IMcoA18LrFSpbysx-uqe7N3I3-QZKwCJqYeQuOUY4&quot;
    },
    &quot;birthdate&quot;: &quot;PNtcyxm0Q5PyiBuG4f6eAbK6h4tF2FffwG3xqknZ_5A&quot;
  }
}
</sourcecode>
<t>In the SVC it can be seen that the blinded claim's original name is <tt>secret_club_membership_no</tt>:</t>

<sourcecode anchor="example-simple_structured_some_blinded-svc_payload" type="json">{
  &quot;sd_release&quot;: {
    &quot;sub&quot;: &quot;{\&quot;s\&quot;: \&quot;2GLC42sKQveCfGfryNRN9w\&quot;, \&quot;v\&quot;: \&quot;6c5c0a49-b589-431d-bae7-219122a9ec2c\&quot;}&quot;,
    &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;}&quot;,
    &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;}&quot;,
    &quot;email&quot;: &quot;{\&quot;s\&quot;: \&quot;Pc33JM2LchcU_lHggv_ufQ\&quot;, \&quot;v\&quot;: \&quot;johndoe@example.com\&quot;}&quot;,
    &quot;phone_number&quot;: &quot;{\&quot;s\&quot;: \&quot;lklxF5jMYlGTPUovMNIvCA\&quot;, \&quot;v\&quot;: \&quot;+1-202-555-0101\&quot;}&quot;,
    &quot;5a2W0_NrlEZzfqmk_7Pq-w&quot;: &quot;{\&quot;s\&quot;: \&quot;5bPs1IquZNa0hkaFzzzZNw\&quot;, \&quot;v\&quot;: \&quot;23\&quot;, \&quot;n\&quot;: \&quot;secret_club_membership_no\&quot;}&quot;,
    &quot;other_secret_club_membership_no&quot;: &quot;{\&quot;s\&quot;: \&quot;y1sVU5wdfJahVdgwPgS7RQ\&quot;, \&quot;v\&quot;: \&quot;42\&quot;}&quot;,
    &quot;address&quot;: {
      &quot;street_address&quot;: &quot;{\&quot;s\&quot;: \&quot;C9GSoujviJquEgYfojCb1A\&quot;, \&quot;v\&quot;: \&quot;123 Main St\&quot;}&quot;,
      &quot;locality&quot;: &quot;{\&quot;s\&quot;: \&quot;H3o1uswP760Fi2yeGdVCEQ\&quot;, \&quot;v\&quot;: \&quot;Anytown\&quot;}&quot;,
      &quot;region&quot;: &quot;{\&quot;s\&quot;: \&quot;M0Jb57t41ubrkSuyrDT3xA\&quot;, \&quot;v\&quot;: \&quot;Anystate\&quot;}&quot;,
      &quot;country&quot;: &quot;{\&quot;s\&quot;: \&quot;eK5o5pHfgupPpltj1qhAJw\&quot;, \&quot;v\&quot;: \&quot;US\&quot;}&quot;
    },
    &quot;birthdate&quot;: &quot;{\&quot;s\&quot;: \&quot;WpxJrFuX8uSi2p4ht09jvw\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;}&quot;
  }
}
</sourcecode>
<t>The verifier would learn this information via the SD-JWT-R:</t>

<sourcecode anchor="example-simple_structured_some_blinded-sd_jwt_release_payload" type="json">{
  &quot;nonce&quot;: &quot;XZOUco1u_gEPknxS78sWWg&quot;,
  &quot;aud&quot;: &quot;https://example.com/verifier&quot;,
  &quot;sd_release&quot;: {
    &quot;given_name&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;}&quot;,
    &quot;family_name&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;}&quot;,
    &quot;birthdate&quot;: &quot;{\&quot;s\&quot;: \&quot;WpxJrFuX8uSi2p4ht09jvw\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;}&quot;,
    &quot;address&quot;: {
      &quot;region&quot;: &quot;{\&quot;s\&quot;: \&quot;M0Jb57t41ubrkSuyrDT3xA\&quot;, \&quot;v\&quot;: \&quot;Anystate\&quot;}&quot;,
      &quot;country&quot;: &quot;{\&quot;s\&quot;: \&quot;eK5o5pHfgupPpltj1qhAJw\&quot;, \&quot;v\&quot;: \&quot;US\&quot;}&quot;
    },
    &quot;5a2W0_NrlEZzfqmk_7Pq-w&quot;: &quot;{\&quot;s\&quot;: \&quot;5bPs1IquZNa0hkaFzzzZNw\&quot;, \&quot;v\&quot;: \&quot;23\&quot;, \&quot;n\&quot;: \&quot;secret_club_membership_no\&quot;}&quot;
  }
}
</sourcecode>
<t>The verifier would decode the data as follows:</t>

<sourcecode anchor="example-simple_structured_some_blinded-verified_contents" type="json">{
  &quot;given_name&quot;: &quot;John&quot;,
  &quot;family_name&quot;: &quot;Doe&quot;,
  &quot;birthdate&quot;: &quot;1940-01-01&quot;,
  &quot;address&quot;: {
    &quot;region&quot;: &quot;Anystate&quot;,
    &quot;country&quot;: &quot;US&quot;
  },
  &quot;secret_club_membership_no&quot;: &quot;23&quot;
}
</sourcecode>
</section>

<section anchor="example-6-all-claim-names-blinded"><name>Example 6: All Claim Names Blinded</name>
<t>In this example, all claim names are blinded. The following user data is used:</t>

<sourcecode anchor="example-simple_structured_all_blinded-user_claims" type="json">{
  &quot;sub&quot;: &quot;6c5c0a49-b589-431d-bae7-219122a9ec2c&quot;,
  &quot;given_name&quot;: &quot;John&quot;,
  &quot;family_name&quot;: &quot;Doe&quot;,
  &quot;email&quot;: &quot;johndoe@example.com&quot;,
  &quot;phone_number&quot;: &quot;+1-202-555-0101&quot;,
  &quot;secret_club_membership_no&quot;: &quot;23&quot;,
  &quot;address&quot;: {
    &quot;street_address&quot;: &quot;123 Main St&quot;,
    &quot;locality&quot;: &quot;Anytown&quot;,
    &quot;region&quot;: &quot;Anystate&quot;,
    &quot;country&quot;: &quot;US&quot;
  },
  &quot;birthdate&quot;: &quot;1940-01-01&quot;
}
</sourcecode>
<t>The resulting SD-JWT payload:</t>

<sourcecode anchor="example-simple_structured_all_blinded-sd_jwt_payload" type="json">{
  &quot;iss&quot;: &quot;https://example.com/issuer&quot;,
  &quot;cnf&quot;: {
    &quot;jwk&quot;: {
      &quot;kty&quot;: &quot;RSA&quot;,
      &quot;n&quot;: &quot;pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw&quot;,
      &quot;e&quot;: &quot;AQAB&quot;
    }
  },
  &quot;iat&quot;: 1516239022,
  &quot;exp&quot;: 1516247022,
  &quot;sd_hash_alg&quot;: &quot;sha-256&quot;,
  &quot;sd_digests&quot;: {
    &quot;eluV5Og3gSNII8EYnsxA_A&quot;: &quot;bvPLqohL5ROmk2UsuNffH8C1wx9o-ipm-G4SkUwrpAE&quot;,
    &quot;eI8ZWm9QnKPpNPeNenHdhQ&quot;: &quot;pCtjs0hC2Klhsnpe7BIqnGAsXlyXXC-lAEgX6isoYVM&quot;,
    &quot;AJx-095VPrpTtN4QMOqROA&quot;: &quot;HS1Ht-bTrXsSTw9JdcHIbTFDkEI_IY52_cmzUgxWZ0k&quot;,
    &quot;G02NSrQfjFXQ7Io09syajA&quot;: &quot;M2YQ_j8OPPBK3ZLhPPP6_AdSa2-rug2urYjgk_ML_QM&quot;,
    &quot;nPuoQnkRFq3BIeAm7AnXFA&quot;: &quot;-Brzrp2cs-8nLs7rQI89YJ76s3PrbVe3n_5hlYCy1cE&quot;,
    &quot;5a2W0_NrlEZzfqmk_7Pq-w&quot;: &quot;gc8VzGTImYRXzP6j7q5RomXt2C_wtsOJ3hAHJdTuEIY&quot;,
    &quot;address&quot;: {
      &quot;HbQ4X8srVW3QDxnIJdqyOA&quot;: &quot;39o5dKobVi8c0dLpg4sjd7zW18UONRra0ht9mgu4hec&quot;,
      &quot;kx5kF17V-x0JmwUx9vgvtw&quot;: &quot;wqueD5ABJ3bTyGSckOMpzI7YUvcCO2l-40vi6JMYsYY&quot;,
      &quot;OBKlTVlvLg-AdwqYGbP8ZA&quot;: &quot;S11dsdFN97YtrA2o3yZ0eBbf1zn-izejORU-fyMtynI&quot;,
      &quot;DsmtKNgpV4dAHpjrcaosAw&quot;: &quot;-0XEQHSNzMu244QaOpLmPD3JkdZN8SrqbEQ4VDufu9A&quot;
    },
    &quot;j7ADdb0UVb0Li0ciPcP0ew&quot;: &quot;X_v1hrkQIH_0LBM8TncMMTBzYN9UJc8FmJRda7yfY8g&quot;
  }
}
</sourcecode>
<t>The SVC:</t>

<sourcecode anchor="example-simple_structured_all_blinded-svc_payload" type="json">{
  &quot;sd_release&quot;: {
    &quot;eluV5Og3gSNII8EYnsxA_A&quot;: &quot;{\&quot;s\&quot;: \&quot;2GLC42sKQveCfGfryNRN9w\&quot;, \&quot;v\&quot;: \&quot;6c5c0a49-b589-431d-bae7-219122a9ec2c\&quot;, \&quot;n\&quot;: \&quot;sub\&quot;}&quot;,
    &quot;eI8ZWm9QnKPpNPeNenHdhQ&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;, \&quot;n\&quot;: \&quot;given_name\&quot;}&quot;,
    &quot;AJx-095VPrpTtN4QMOqROA&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;, \&quot;n\&quot;: \&quot;family_name\&quot;}&quot;,
    &quot;G02NSrQfjFXQ7Io09syajA&quot;: &quot;{\&quot;s\&quot;: \&quot;Pc33JM2LchcU_lHggv_ufQ\&quot;, \&quot;v\&quot;: \&quot;johndoe@example.com\&quot;, \&quot;n\&quot;: \&quot;email\&quot;}&quot;,
    &quot;nPuoQnkRFq3BIeAm7AnXFA&quot;: &quot;{\&quot;s\&quot;: \&quot;lklxF5jMYlGTPUovMNIvCA\&quot;, \&quot;v\&quot;: \&quot;+1-202-555-0101\&quot;, \&quot;n\&quot;: \&quot;phone_number\&quot;}&quot;,
    &quot;5a2W0_NrlEZzfqmk_7Pq-w&quot;: &quot;{\&quot;s\&quot;: \&quot;5bPs1IquZNa0hkaFzzzZNw\&quot;, \&quot;v\&quot;: \&quot;23\&quot;, \&quot;n\&quot;: \&quot;secret_club_membership_no\&quot;}&quot;,
    &quot;address&quot;: {
      &quot;HbQ4X8srVW3QDxnIJdqyOA&quot;: &quot;{\&quot;s\&quot;: \&quot;y1sVU5wdfJahVdgwPgS7RQ\&quot;, \&quot;v\&quot;: \&quot;123 Main St\&quot;, \&quot;n\&quot;: \&quot;street_address\&quot;}&quot;,
      &quot;kx5kF17V-x0JmwUx9vgvtw&quot;: &quot;{\&quot;s\&quot;: \&quot;C9GSoujviJquEgYfojCb1A\&quot;, \&quot;v\&quot;: \&quot;Anytown\&quot;, \&quot;n\&quot;: \&quot;locality\&quot;}&quot;,
      &quot;OBKlTVlvLg-AdwqYGbP8ZA&quot;: &quot;{\&quot;s\&quot;: \&quot;H3o1uswP760Fi2yeGdVCEQ\&quot;, \&quot;v\&quot;: \&quot;Anystate\&quot;, \&quot;n\&quot;: \&quot;region\&quot;}&quot;,
      &quot;DsmtKNgpV4dAHpjrcaosAw&quot;: &quot;{\&quot;s\&quot;: \&quot;M0Jb57t41ubrkSuyrDT3xA\&quot;, \&quot;v\&quot;: \&quot;US\&quot;, \&quot;n\&quot;: \&quot;country\&quot;}&quot;
    },
    &quot;j7ADdb0UVb0Li0ciPcP0ew&quot;: &quot;{\&quot;s\&quot;: \&quot;eK5o5pHfgupPpltj1qhAJw\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;, \&quot;n\&quot;: \&quot;birthdate\&quot;}&quot;
  }
}
</sourcecode>
<t>Here, the holder decided only to release a subset of the claims to the verifier:</t>

<sourcecode anchor="example-simple_structured_all_blinded-sd_jwt_release_payload" type="json">{
  &quot;nonce&quot;: &quot;XZOUco1u_gEPknxS78sWWg&quot;,
  &quot;aud&quot;: &quot;https://example.com/verifier&quot;,
  &quot;sd_release&quot;: {
    &quot;eI8ZWm9QnKPpNPeNenHdhQ&quot;: &quot;{\&quot;s\&quot;: \&quot;6Ij7tM-a5iVPGboS5tmvVA\&quot;, \&quot;v\&quot;: \&quot;John\&quot;, \&quot;n\&quot;: \&quot;given_name\&quot;}&quot;,
    &quot;AJx-095VPrpTtN4QMOqROA&quot;: &quot;{\&quot;s\&quot;: \&quot;Qg_O64zqAxe412a108iroA\&quot;, \&quot;v\&quot;: \&quot;Doe\&quot;, \&quot;n\&quot;: \&quot;family_name\&quot;}&quot;,
    &quot;j7ADdb0UVb0Li0ciPcP0ew&quot;: &quot;{\&quot;s\&quot;: \&quot;eK5o5pHfgupPpltj1qhAJw\&quot;, \&quot;v\&quot;: \&quot;1940-01-01\&quot;, \&quot;n\&quot;: \&quot;birthdate\&quot;}&quot;,
    &quot;address&quot;: {
      &quot;OBKlTVlvLg-AdwqYGbP8ZA&quot;: &quot;{\&quot;s\&quot;: \&quot;H3o1uswP760Fi2yeGdVCEQ\&quot;, \&quot;v\&quot;: \&quot;Anystate\&quot;, \&quot;n\&quot;: \&quot;region\&quot;}&quot;,
      &quot;DsmtKNgpV4dAHpjrcaosAw&quot;: &quot;{\&quot;s\&quot;: \&quot;M0Jb57t41ubrkSuyrDT3xA\&quot;, \&quot;v\&quot;: \&quot;US\&quot;, \&quot;n\&quot;: \&quot;country\&quot;}&quot;
    }
  }
}
</sourcecode>
<t>The verifier would decode the SD-JWT-R and SD-JWT as follows:</t>

<sourcecode anchor="example-simple_structured_all_blinded-verified_contents" type="json">{
  &quot;given_name&quot;: &quot;John&quot;,
  &quot;family_name&quot;: &quot;Doe&quot;,
  &quot;birthdate&quot;: &quot;1940-01-01&quot;,
  &quot;address&quot;: {
    &quot;region&quot;: &quot;Anystate&quot;,
    &quot;country&quot;: &quot;US&quot;
  }
}
</sourcecode>
</section>
</section>

<section anchor="document-history"><name>Document History</name>
<t>[[ To be removed from the final specification ]]</t>
<t>-01</t>

<ul>
<li><t>clarified relationship between <tt>sd_release</tt> in the Release and SD-JWT</t>
</li>
<li><t>updated examples</t>
</li>
<li><t>clarifications</t>
</li>
<li><t>fix <tt>cnf</tt> structure in examples</t>
</li>
</ul>
<t>-00</t>

<ul>
<li><t>Upload as draft-ietf-oauth-selective-disclosure-jwt-00</t>
</li>
</ul>
<t>[[ pre Working Group Adoption: ]]</t>
<t>-02</t>

<ul>
<li><t>Added acknowledgements</t>
</li>
<li><t>Improved Security Considerations</t>
</li>
<li><t>Stressed uniqueness requirements for salts</t>
</li>
<li><t>Python reference implementation clean-up and refactoring</t>
</li>
<li><t>hash<em>alg renamed to sd</em>hash_alg</t>
</li>
</ul>
<t>-01</t>

<ul>
<li><t>Editorial fixes</t>
</li>
<li><t>Added <tt>hash_alg</tt> claim</t>
</li>
<li><t>Renamed <tt>_sd</tt> to <tt>sd_digests</tt> and <tt>sd_release</tt></t>
</li>
<li><t>Added descriptions on holder binding - more work to do</t>
</li>
<li><t>Clarify that signing the SD-JWT is mandatory</t>
</li>
</ul>
<t>-00</t>

<ul>
<li><t>Renamed to SD-JWT (focus on JWT instead of JWS since signature is optional)</t>
</li>
<li><t>Make holder binding optional</t>
</li>
<li><t>Rename proof to release, since when there is no signature, the term &quot;proof&quot; can be misleading</t>
</li>
<li><t>Improved the structure of the description</t>
</li>
<li><t>Described verification steps</t>
</li>
<li><t>All examples generated from python demo implementation</t>
</li>
<li><t>Examples for structured objects</t>
</li>
</ul>
</section>

</back>

</rfc>
